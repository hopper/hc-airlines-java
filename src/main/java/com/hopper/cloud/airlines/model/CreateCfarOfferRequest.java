/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.CfarItinerary;
import com.hopper.cloud.airlines.model.RequestType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * A create CFAR offer request
 */
@ApiModel(description = "A create CFAR offer request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-28T12:18:49.517876+02:00[Europe/Paris]")
public class CreateCfarOfferRequest {
  public static final String SERIALIZED_NAME_ITINERARY = "itinerary";
  @SerializedName(SERIALIZED_NAME_ITINERARY)
  private List<CfarItinerary> itinerary = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "request_type";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private RequestType requestType;

  public static final String SERIALIZED_NAME_BOOKING_DATE_TIME = "booking_date_time";
  @SerializedName(SERIALIZED_NAME_BOOKING_DATE_TIME)
  private OffsetDateTime bookingDateTime;

  public static final String SERIALIZED_NAME_EXT_ATTRIBUTES = "ext_attributes";
  @SerializedName(SERIALIZED_NAME_EXT_ATTRIBUTES)
  private Map<String, String> extAttributes = new HashMap<>();

  public CreateCfarOfferRequest() { 
  }

  public CreateCfarOfferRequest itinerary(List<CfarItinerary> itinerary) {
    
    this.itinerary = itinerary;
    return this;
  }

  public CreateCfarOfferRequest addItineraryItem(CfarItinerary itineraryItem) {
    this.itinerary.add(itineraryItem);
    return this;
  }

   /**
   * Get itinerary
   * @return itinerary
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<CfarItinerary> getItinerary() {
    return itinerary;
  }


  public void setItinerary(List<CfarItinerary> itinerary) {
    this.itinerary = itinerary;
  }


  public CreateCfarOfferRequest requestType(RequestType requestType) {
    
    this.requestType = requestType;
    return this;
  }

   /**
   * Get requestType
   * @return requestType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public RequestType getRequestType() {
    return requestType;
  }


  public void setRequestType(RequestType requestType) {
    this.requestType = requestType;
  }


  public CreateCfarOfferRequest bookingDateTime(OffsetDateTime bookingDateTime) {
    
    this.bookingDateTime = bookingDateTime;
    return this;
  }

   /**
   * Get bookingDateTime
   * @return bookingDateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getBookingDateTime() {
    return bookingDateTime;
  }


  public void setBookingDateTime(OffsetDateTime bookingDateTime) {
    this.bookingDateTime = bookingDateTime;
  }


  public CreateCfarOfferRequest extAttributes(Map<String, String> extAttributes) {
    
    this.extAttributes = extAttributes;
    return this;
  }

  public CreateCfarOfferRequest putExtAttributesItem(String key, String extAttributesItem) {
    this.extAttributes.put(key, extAttributesItem);
    return this;
  }

   /**
   * Get extAttributes
   * @return extAttributes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Map<String, String> getExtAttributes() {
    return extAttributes;
  }


  public void setExtAttributes(Map<String, String> extAttributes) {
    this.extAttributes = extAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCfarOfferRequest createCfarOfferRequest = (CreateCfarOfferRequest) o;
    return Objects.equals(this.itinerary, createCfarOfferRequest.itinerary) &&
        Objects.equals(this.requestType, createCfarOfferRequest.requestType) &&
        Objects.equals(this.bookingDateTime, createCfarOfferRequest.bookingDateTime) &&
        Objects.equals(this.extAttributes, createCfarOfferRequest.extAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itinerary, requestType, bookingDateTime, extAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCfarOfferRequest {\n");
    sb.append("    itinerary: ").append(toIndentedString(itinerary)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    bookingDateTime: ").append(toIndentedString(bookingDateTime)).append("\n");
    sb.append("    extAttributes: ").append(toIndentedString(extAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itinerary");
    openapiFields.add("request_type");
    openapiFields.add("booking_date_time");
    openapiFields.add("ext_attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("itinerary");
    openapiRequiredFields.add("request_type");
    openapiRequiredFields.add("ext_attributes");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateCfarOfferRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CreateCfarOfferRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCfarOfferRequest is not found in the empty JSON string", CreateCfarOfferRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateCfarOfferRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCfarOfferRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateCfarOfferRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      JsonArray jsonArrayitinerary = jsonObj.getAsJsonArray("itinerary");
      if (jsonArrayitinerary != null) {
        // ensure the json data is an array
        if (!jsonObj.get("itinerary").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `itinerary` to be an array in the JSON string but got `%s`", jsonObj.get("itinerary").toString()));
        }

        // validate the optional field `itinerary` (array)
        for (int i = 0; i < jsonArrayitinerary.size(); i++) {
          CfarItinerary.validateJsonObject(jsonArrayitinerary.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCfarOfferRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCfarOfferRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCfarOfferRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCfarOfferRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCfarOfferRequest>() {
           @Override
           public void write(JsonWriter out, CreateCfarOfferRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCfarOfferRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateCfarOfferRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateCfarOfferRequest
  * @throws IOException if the JSON string is invalid with respect to CreateCfarOfferRequest
  */
  public static CreateCfarOfferRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCfarOfferRequest.class);
  }

 /**
  * Convert an instance of CreateCfarOfferRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

