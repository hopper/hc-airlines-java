/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.AirlineRefundMethod;
import com.hopper.cloud.airlines.model.ModificationTime;
import com.hopper.cloud.airlines.model.ModificationType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * FareRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-02T17:40:08.115903591Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class FareRule {
  public static final String SERIALIZED_NAME_MODIFICATION_TYPE = "modification_type";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TYPE)
  @javax.annotation.Nonnull
  private ModificationType modificationType;

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modification_time";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  @javax.annotation.Nonnull
  private ModificationTime modificationTime;

  public static final String SERIALIZED_NAME_ALLOWED = "allowed";
  @SerializedName(SERIALIZED_NAME_ALLOWED)
  @javax.annotation.Nonnull
  private Boolean allowed;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  @javax.annotation.Nullable
  private String fee;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  @javax.annotation.Nullable
  private String percentage;

  public static final String SERIALIZED_NAME_REFUND_METHOD = "refund_method";
  @SerializedName(SERIALIZED_NAME_REFUND_METHOD)
  @javax.annotation.Nullable
  private AirlineRefundMethod refundMethod;

  public FareRule() {
  }

  public FareRule modificationType(@javax.annotation.Nonnull ModificationType modificationType) {
    this.modificationType = modificationType;
    return this;
  }

  /**
   * Get modificationType
   * @return modificationType
   */
  @javax.annotation.Nonnull
  public ModificationType getModificationType() {
    return modificationType;
  }

  public void setModificationType(@javax.annotation.Nonnull ModificationType modificationType) {
    this.modificationType = modificationType;
  }


  public FareRule modificationTime(@javax.annotation.Nonnull ModificationTime modificationTime) {
    this.modificationTime = modificationTime;
    return this;
  }

  /**
   * Get modificationTime
   * @return modificationTime
   */
  @javax.annotation.Nonnull
  public ModificationTime getModificationTime() {
    return modificationTime;
  }

  public void setModificationTime(@javax.annotation.Nonnull ModificationTime modificationTime) {
    this.modificationTime = modificationTime;
  }


  public FareRule allowed(@javax.annotation.Nonnull Boolean allowed) {
    this.allowed = allowed;
    return this;
  }

  /**
   * Determines if that type of modifications at this time is allowed
   * @return allowed
   */
  @javax.annotation.Nonnull
  public Boolean getAllowed() {
    return allowed;
  }

  public void setAllowed(@javax.annotation.Nonnull Boolean allowed) {
    this.allowed = allowed;
  }


  public FareRule fee(@javax.annotation.Nullable String fee) {
    this.fee = fee;
    return this;
  }

  /**
   * Amount to be paid as penalty fee to perform the modification
   * @return fee
   */
  @javax.annotation.Nullable
  public String getFee() {
    return fee;
  }

  public void setFee(@javax.annotation.Nullable String fee) {
    this.fee = fee;
  }


  public FareRule percentage(@javax.annotation.Nullable String percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Percentage of the fare to be paid as penalty to perform the modification
   * @return percentage
   */
  @javax.annotation.Nullable
  public String getPercentage() {
    return percentage;
  }

  public void setPercentage(@javax.annotation.Nullable String percentage) {
    this.percentage = percentage;
  }


  public FareRule refundMethod(@javax.annotation.Nullable AirlineRefundMethod refundMethod) {
    this.refundMethod = refundMethod;
    return this;
  }

  /**
   * Get refundMethod
   * @return refundMethod
   */
  @javax.annotation.Nullable
  public AirlineRefundMethod getRefundMethod() {
    return refundMethod;
  }

  public void setRefundMethod(@javax.annotation.Nullable AirlineRefundMethod refundMethod) {
    this.refundMethod = refundMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FareRule fareRule = (FareRule) o;
    return Objects.equals(this.modificationType, fareRule.modificationType) &&
        Objects.equals(this.modificationTime, fareRule.modificationTime) &&
        Objects.equals(this.allowed, fareRule.allowed) &&
        Objects.equals(this.fee, fareRule.fee) &&
        Objects.equals(this.percentage, fareRule.percentage) &&
        Objects.equals(this.refundMethod, fareRule.refundMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modificationType, modificationTime, allowed, fee, percentage, refundMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FareRule {\n");
    sb.append("    modificationType: ").append(toIndentedString(modificationType)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    allowed: ").append(toIndentedString(allowed)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    refundMethod: ").append(toIndentedString(refundMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("modification_type");
    openapiFields.add("modification_time");
    openapiFields.add("allowed");
    openapiFields.add("fee");
    openapiFields.add("percentage");
    openapiFields.add("refund_method");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("modification_type");
    openapiRequiredFields.add("modification_time");
    openapiRequiredFields.add("allowed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FareRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FareRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FareRule is not found in the empty JSON string", FareRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FareRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FareRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FareRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `modification_type`
      ModificationType.validateJsonElement(jsonObj.get("modification_type"));
      // validate the required field `modification_time`
      ModificationTime.validateJsonElement(jsonObj.get("modification_time"));
      if ((jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonNull()) && !jsonObj.get("fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fee").toString()));
      }
      if ((jsonObj.get("percentage") != null && !jsonObj.get("percentage").isJsonNull()) && !jsonObj.get("percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage").toString()));
      }
      // validate the optional field `refund_method`
      if (jsonObj.get("refund_method") != null && !jsonObj.get("refund_method").isJsonNull()) {
        AirlineRefundMethod.validateJsonElement(jsonObj.get("refund_method"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FareRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FareRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FareRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FareRule.class));

       return (TypeAdapter<T>) new TypeAdapter<FareRule>() {
           @Override
           public void write(JsonWriter out, FareRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FareRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FareRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FareRule
   * @throws IOException if the JSON string is invalid with respect to FareRule
   */
  public static FareRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FareRule.class);
  }

  /**
   * Convert an instance of FareRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

