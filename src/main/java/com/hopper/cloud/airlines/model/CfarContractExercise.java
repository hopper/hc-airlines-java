/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * An object containing exercise information for a contract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-02T17:40:08.115903591Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class CfarContractExercise {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_CONTRACT_ID = "contract_id";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  @javax.annotation.Nonnull
  private String contractId;

  public static final String SERIALIZED_NAME_EXERCISE_INITIATED_DATE_TIME = "exercise_initiated_date_time";
  @SerializedName(SERIALIZED_NAME_EXERCISE_INITIATED_DATE_TIME)
  @javax.annotation.Nonnull
  private OffsetDateTime exerciseInitiatedDateTime;

  public static final String SERIALIZED_NAME_CASH_REFUND_ALLOWANCE = "cash_refund_allowance";
  @SerializedName(SERIALIZED_NAME_CASH_REFUND_ALLOWANCE)
  @javax.annotation.Nonnull
  private String cashRefundAllowance;

  public static final String SERIALIZED_NAME_EXT_ATTRIBUTES = "ext_attributes";
  @SerializedName(SERIALIZED_NAME_EXT_ATTRIBUTES)
  @javax.annotation.Nonnull
  private Map<String, String> extAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_FTC_REFUND_ALLOWANCE = "ftc_refund_allowance";
  @SerializedName(SERIALIZED_NAME_FTC_REFUND_ALLOWANCE)
  @javax.annotation.Nullable
  private String ftcRefundAllowance;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_REDIRECTION_TOKEN = "redirection_token";
  @SerializedName(SERIALIZED_NAME_REDIRECTION_TOKEN)
  @javax.annotation.Nonnull
  private UUID redirectionToken;

  public static final String SERIALIZED_NAME_REDIRECTION_URL = "redirection_url";
  @SerializedName(SERIALIZED_NAME_REDIRECTION_URL)
  @javax.annotation.Nullable
  private String redirectionUrl;

  public CfarContractExercise() {
  }

  public CfarContractExercise id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for a CFAR exercise
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public CfarContractExercise contractId(@javax.annotation.Nonnull String contractId) {
    this.contractId = contractId;
    return this;
  }

  /**
   * Unique identifier for a contract
   * @return contractId
   */
  @javax.annotation.Nonnull
  public String getContractId() {
    return contractId;
  }

  public void setContractId(@javax.annotation.Nonnull String contractId) {
    this.contractId = contractId;
  }


  public CfarContractExercise exerciseInitiatedDateTime(@javax.annotation.Nonnull OffsetDateTime exerciseInitiatedDateTime) {
    this.exerciseInitiatedDateTime = exerciseInitiatedDateTime;
    return this;
  }

  /**
   * A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a contract exercise was initiated
   * @return exerciseInitiatedDateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getExerciseInitiatedDateTime() {
    return exerciseInitiatedDateTime;
  }

  public void setExerciseInitiatedDateTime(@javax.annotation.Nonnull OffsetDateTime exerciseInitiatedDateTime) {
    this.exerciseInitiatedDateTime = exerciseInitiatedDateTime;
  }


  public CfarContractExercise cashRefundAllowance(@javax.annotation.Nonnull String cashRefundAllowance) {
    this.cashRefundAllowance = cashRefundAllowance;
    return this;
  }

  /**
   * Refundable amount allowed in cash
   * @return cashRefundAllowance
   */
  @javax.annotation.Nonnull
  public String getCashRefundAllowance() {
    return cashRefundAllowance;
  }

  public void setCashRefundAllowance(@javax.annotation.Nonnull String cashRefundAllowance) {
    this.cashRefundAllowance = cashRefundAllowance;
  }


  public CfarContractExercise extAttributes(@javax.annotation.Nonnull Map<String, String> extAttributes) {
    this.extAttributes = extAttributes;
    return this;
  }

  public CfarContractExercise putExtAttributesItem(String key, String extAttributesItem) {
    if (this.extAttributes == null) {
      this.extAttributes = new HashMap<>();
    }
    this.extAttributes.put(key, extAttributesItem);
    return this;
  }

  /**
   * Get extAttributes
   * @return extAttributes
   */
  @javax.annotation.Nonnull
  public Map<String, String> getExtAttributes() {
    return extAttributes;
  }

  public void setExtAttributes(@javax.annotation.Nonnull Map<String, String> extAttributes) {
    this.extAttributes = extAttributes;
  }


  public CfarContractExercise ftcRefundAllowance(@javax.annotation.Nullable String ftcRefundAllowance) {
    this.ftcRefundAllowance = ftcRefundAllowance;
    return this;
  }

  /**
   * Refundable amount allowed in future travel credit
   * @return ftcRefundAllowance
   */
  @javax.annotation.Nullable
  public String getFtcRefundAllowance() {
    return ftcRefundAllowance;
  }

  public void setFtcRefundAllowance(@javax.annotation.Nullable String ftcRefundAllowance) {
    this.ftcRefundAllowance = ftcRefundAllowance;
  }


  public CfarContractExercise currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency of the airline&#39;s refund allowance
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public CfarContractExercise redirectionToken(@javax.annotation.Nonnull UUID redirectionToken) {
    this.redirectionToken = redirectionToken;
    return this;
  }

  /**
   * Token used to authenticate the redirection after filling refund information in claims portal
   * @return redirectionToken
   */
  @javax.annotation.Nonnull
  public UUID getRedirectionToken() {
    return redirectionToken;
  }

  public void setRedirectionToken(@javax.annotation.Nonnull UUID redirectionToken) {
    this.redirectionToken = redirectionToken;
  }


  public CfarContractExercise redirectionUrl(@javax.annotation.Nullable String redirectionUrl) {
    this.redirectionUrl = redirectionUrl;
    return this;
  }

  /**
   * URL on which the customer should be redirected to exercise (if applicable)
   * @return redirectionUrl
   */
  @javax.annotation.Nullable
  public String getRedirectionUrl() {
    return redirectionUrl;
  }

  public void setRedirectionUrl(@javax.annotation.Nullable String redirectionUrl) {
    this.redirectionUrl = redirectionUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CfarContractExercise cfarContractExercise = (CfarContractExercise) o;
    return Objects.equals(this.id, cfarContractExercise.id) &&
        Objects.equals(this.contractId, cfarContractExercise.contractId) &&
        Objects.equals(this.exerciseInitiatedDateTime, cfarContractExercise.exerciseInitiatedDateTime) &&
        Objects.equals(this.cashRefundAllowance, cfarContractExercise.cashRefundAllowance) &&
        Objects.equals(this.extAttributes, cfarContractExercise.extAttributes) &&
        Objects.equals(this.ftcRefundAllowance, cfarContractExercise.ftcRefundAllowance) &&
        Objects.equals(this.currency, cfarContractExercise.currency) &&
        Objects.equals(this.redirectionToken, cfarContractExercise.redirectionToken) &&
        Objects.equals(this.redirectionUrl, cfarContractExercise.redirectionUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, contractId, exerciseInitiatedDateTime, cashRefundAllowance, extAttributes, ftcRefundAllowance, currency, redirectionToken, redirectionUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CfarContractExercise {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    exerciseInitiatedDateTime: ").append(toIndentedString(exerciseInitiatedDateTime)).append("\n");
    sb.append("    cashRefundAllowance: ").append(toIndentedString(cashRefundAllowance)).append("\n");
    sb.append("    extAttributes: ").append(toIndentedString(extAttributes)).append("\n");
    sb.append("    ftcRefundAllowance: ").append(toIndentedString(ftcRefundAllowance)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    redirectionToken: ").append(toIndentedString(redirectionToken)).append("\n");
    sb.append("    redirectionUrl: ").append(toIndentedString(redirectionUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("contract_id");
    openapiFields.add("exercise_initiated_date_time");
    openapiFields.add("cash_refund_allowance");
    openapiFields.add("ext_attributes");
    openapiFields.add("ftc_refund_allowance");
    openapiFields.add("currency");
    openapiFields.add("redirection_token");
    openapiFields.add("redirection_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("contract_id");
    openapiRequiredFields.add("exercise_initiated_date_time");
    openapiRequiredFields.add("cash_refund_allowance");
    openapiRequiredFields.add("ext_attributes");
    openapiRequiredFields.add("redirection_token");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CfarContractExercise
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CfarContractExercise.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CfarContractExercise is not found in the empty JSON string", CfarContractExercise.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CfarContractExercise.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CfarContractExercise` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CfarContractExercise.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("contract_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_id").toString()));
      }
      if (!jsonObj.get("cash_refund_allowance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cash_refund_allowance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cash_refund_allowance").toString()));
      }
      if ((jsonObj.get("ftc_refund_allowance") != null && !jsonObj.get("ftc_refund_allowance").isJsonNull()) && !jsonObj.get("ftc_refund_allowance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftc_refund_allowance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftc_refund_allowance").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("redirection_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirection_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirection_token").toString()));
      }
      if ((jsonObj.get("redirection_url") != null && !jsonObj.get("redirection_url").isJsonNull()) && !jsonObj.get("redirection_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirection_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirection_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CfarContractExercise.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CfarContractExercise' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CfarContractExercise> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CfarContractExercise.class));

       return (TypeAdapter<T>) new TypeAdapter<CfarContractExercise>() {
           @Override
           public void write(JsonWriter out, CfarContractExercise value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CfarContractExercise read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CfarContractExercise given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CfarContractExercise
   * @throws IOException if the JSON string is invalid with respect to CfarContractExercise
   */
  public static CfarContractExercise fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CfarContractExercise.class);
  }

  /**
   * Convert an instance of CfarContractExercise to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

