/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.Ancillary;
import com.hopper.cloud.airlines.model.CfarCreateExerciseItinerarySlice;
import com.hopper.cloud.airlines.model.CfarCreateExercisePassengerPricing;
import com.hopper.cloud.airlines.model.CfarPassenger;
import com.hopper.cloud.airlines.model.FareRule;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * Itinerary of the user when the contract exercise was initiated (only active segments should be provided)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CfarCreateExerciseItinerary {
  public static final String SERIALIZED_NAME_PASSENGER_PRICING = "passenger_pricing";
  @SerializedName(SERIALIZED_NAME_PASSENGER_PRICING)
  @javax.annotation.Nullable
  private List<CfarCreateExercisePassengerPricing> passengerPricing = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_SLICES = "slices";
  @SerializedName(SERIALIZED_NAME_SLICES)
    private List<CfarCreateExerciseItinerarySlice> slices = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANCILLARIES = "ancillaries";
  @SerializedName(SERIALIZED_NAME_ANCILLARIES)
  @javax.annotation.Nullable
  private List<Ancillary> ancillaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_PRICE = "total_price";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE)
  @javax.annotation.Nullable
  private String totalPrice;

  public static final String SERIALIZED_NAME_PASSENGERS = "passengers";
  @SerializedName(SERIALIZED_NAME_PASSENGERS)
  @javax.annotation.Nullable
  private List<CfarPassenger> passengers = new ArrayList<>();

  public static final String SERIALIZED_NAME_FARE_RULES = "fare_rules";
  @SerializedName(SERIALIZED_NAME_FARE_RULES)
  @javax.annotation.Nullable
  private List<FareRule> fareRules = new ArrayList<>();

  public CfarCreateExerciseItinerary() {
  }

  public CfarCreateExerciseItinerary passengerPricing(@javax.annotation.Nullable List<CfarCreateExercisePassengerPricing> passengerPricing) {
    this.passengerPricing = passengerPricing;
    return this;
  }

  public CfarCreateExerciseItinerary addPassengerPricingItem(CfarCreateExercisePassengerPricing passengerPricingItem) {
    if (this.passengerPricing == null) {
      this.passengerPricing = new ArrayList<>();
    }
    this.passengerPricing.add(passengerPricingItem);
    return this;
  }

  /**
   * List of passengers type, count and pricing for the itinerary
   * @return passengerPricing
   */
  @javax.annotation.Nullable
  public List<CfarCreateExercisePassengerPricing> getPassengerPricing() {
    return passengerPricing;
  }

  public void setPassengerPricing(@javax.annotation.Nullable List<CfarCreateExercisePassengerPricing> passengerPricing) {
    this.passengerPricing = passengerPricing;
  }


  public CfarCreateExerciseItinerary currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of pricing fields
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public CfarCreateExerciseItinerary slices(List<CfarCreateExerciseItinerarySlice> slices) {
    this.slices = slices;
    return this;
  }

  public CfarCreateExerciseItinerary addSlicesItem(CfarCreateExerciseItinerarySlice slicesItem) {
    if (this.slices == null) {
      this.slices = new ArrayList<>();
    }
    this.slices.add(slicesItem);
    return this;
  }

  /**
   * List of slices of the itinerary; 1 (one way),  2 (round trip) or up to 10 (multi-destination) slices are allowed
   * @return slices
   */
    public List<CfarCreateExerciseItinerarySlice> getSlices() {
    return slices;
  }

  public void setSlices(List<CfarCreateExerciseItinerarySlice> slices) {
    this.slices = slices;
  }


  public CfarCreateExerciseItinerary ancillaries(@javax.annotation.Nullable List<Ancillary> ancillaries) {
    this.ancillaries = ancillaries;
    return this;
  }

  public CfarCreateExerciseItinerary addAncillariesItem(Ancillary ancillariesItem) {
    if (this.ancillaries == null) {
      this.ancillaries = new ArrayList<>();
    }
    this.ancillaries.add(ancillariesItem);
    return this;
  }

  /**
   * Ancillaries attached to the itinerary and their prices. Only ancillaries covered by CFAR must be filled
   * @return ancillaries
   */
  @javax.annotation.Nullable
  public List<Ancillary> getAncillaries() {
    return ancillaries;
  }

  public void setAncillaries(@javax.annotation.Nullable List<Ancillary> ancillaries) {
    this.ancillaries = ancillaries;
  }


  public CfarCreateExerciseItinerary totalPrice(@javax.annotation.Nullable String totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

  /**
   * Total price to be covered by CFAR (including ancillaries if applicable)
   * @return totalPrice
   */
  @javax.annotation.Nullable
  public String getTotalPrice() {
    return totalPrice;
  }

  public void setTotalPrice(@javax.annotation.Nullable String totalPrice) {
    this.totalPrice = totalPrice;
  }


  public CfarCreateExerciseItinerary passengers(@javax.annotation.Nullable List<CfarPassenger> passengers) {
    this.passengers = passengers;
    return this;
  }

  public CfarCreateExerciseItinerary addPassengersItem(CfarPassenger passengersItem) {
    if (this.passengers == null) {
      this.passengers = new ArrayList<>();
    }
    this.passengers.add(passengersItem);
    return this;
  }

  /**
   * Details of the passengers
   * @return passengers
   */
  @javax.annotation.Nullable
  public List<CfarPassenger> getPassengers() {
    return passengers;
  }

  public void setPassengers(@javax.annotation.Nullable List<CfarPassenger> passengers) {
    this.passengers = passengers;
  }


  public CfarCreateExerciseItinerary fareRules(@javax.annotation.Nullable List<FareRule> fareRules) {
    this.fareRules = fareRules;
    return this;
  }

  public CfarCreateExerciseItinerary addFareRulesItem(FareRule fareRulesItem) {
    if (this.fareRules == null) {
      this.fareRules = new ArrayList<>();
    }
    this.fareRules.add(fareRulesItem);
    return this;
  }

  /**
   * The fare rules associated to the itinerary. If different fare rules apply to different slices in the itinerary, indicate the most restrictive.
   * @return fareRules
   */
  @javax.annotation.Nullable
  public List<FareRule> getFareRules() {
    return fareRules;
  }

  public void setFareRules(@javax.annotation.Nullable List<FareRule> fareRules) {
    this.fareRules = fareRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CfarCreateExerciseItinerary cfarCreateExerciseItinerary = (CfarCreateExerciseItinerary) o;
    return Objects.equals(this.passengerPricing, cfarCreateExerciseItinerary.passengerPricing) &&
        Objects.equals(this.currency, cfarCreateExerciseItinerary.currency) &&
        Objects.equals(this.slices, cfarCreateExerciseItinerary.slices) &&
        Objects.equals(this.ancillaries, cfarCreateExerciseItinerary.ancillaries) &&
        Objects.equals(this.totalPrice, cfarCreateExerciseItinerary.totalPrice) &&
        Objects.equals(this.passengers, cfarCreateExerciseItinerary.passengers) &&
        Objects.equals(this.fareRules, cfarCreateExerciseItinerary.fareRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passengerPricing, currency, slices, ancillaries, totalPrice, passengers, fareRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CfarCreateExerciseItinerary {\n");
    sb.append("    passengerPricing: ").append(toIndentedString(passengerPricing)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    slices: ").append(toIndentedString(slices)).append("\n");
    sb.append("    ancillaries: ").append(toIndentedString(ancillaries)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    passengers: ").append(toIndentedString(passengers)).append("\n");
    sb.append("    fareRules: ").append(toIndentedString(fareRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("passenger_pricing");
    openapiFields.add("currency");
    openapiFields.add("slices");
    openapiFields.add("ancillaries");
    openapiFields.add("total_price");
    openapiFields.add("passengers");
    openapiFields.add("fare_rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("slices");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CfarCreateExerciseItinerary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CfarCreateExerciseItinerary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CfarCreateExerciseItinerary is not found in the empty JSON string", CfarCreateExerciseItinerary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CfarCreateExerciseItinerary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CfarCreateExerciseItinerary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CfarCreateExerciseItinerary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("passenger_pricing") != null && !jsonObj.get("passenger_pricing").isJsonNull()) {
        JsonArray jsonArraypassengerPricing = jsonObj.getAsJsonArray("passenger_pricing");
        if (jsonArraypassengerPricing != null) {
          // ensure the json data is an array
          if (!jsonObj.get("passenger_pricing").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `passenger_pricing` to be an array in the JSON string but got `%s`", jsonObj.get("passenger_pricing").toString()));
          }

          // validate the optional field `passenger_pricing` (array)
          for (int i = 0; i < jsonArraypassengerPricing.size(); i++) {
            CfarCreateExercisePassengerPricing.validateJsonElement(jsonArraypassengerPricing.get(i));
          };
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("slices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `slices` to be an array in the JSON string but got `%s`", jsonObj.get("slices").toString()));
      }

      JsonArray jsonArrayslices = jsonObj.getAsJsonArray("slices");
      // validate the required field `slices` (array)
      for (int i = 0; i < jsonArrayslices.size(); i++) {
        CfarCreateExerciseItinerarySlice.validateJsonElement(jsonArrayslices.get(i));
      };
      if (jsonObj.get("ancillaries") != null && !jsonObj.get("ancillaries").isJsonNull()) {
        JsonArray jsonArrayancillaries = jsonObj.getAsJsonArray("ancillaries");
        if (jsonArrayancillaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ancillaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ancillaries` to be an array in the JSON string but got `%s`", jsonObj.get("ancillaries").toString()));
          }

          // validate the optional field `ancillaries` (array)
          for (int i = 0; i < jsonArrayancillaries.size(); i++) {
            Ancillary.validateJsonElement(jsonArrayancillaries.get(i));
          };
        }
      }
      if ((jsonObj.get("total_price") != null && !jsonObj.get("total_price").isJsonNull()) && !jsonObj.get("total_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_price").toString()));
      }
      if (jsonObj.get("passengers") != null && !jsonObj.get("passengers").isJsonNull()) {
        JsonArray jsonArraypassengers = jsonObj.getAsJsonArray("passengers");
        if (jsonArraypassengers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("passengers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `passengers` to be an array in the JSON string but got `%s`", jsonObj.get("passengers").toString()));
          }

          // validate the optional field `passengers` (array)
          for (int i = 0; i < jsonArraypassengers.size(); i++) {
            CfarPassenger.validateJsonElement(jsonArraypassengers.get(i));
          };
        }
      }
      if (jsonObj.get("fare_rules") != null && !jsonObj.get("fare_rules").isJsonNull()) {
        JsonArray jsonArrayfareRules = jsonObj.getAsJsonArray("fare_rules");
        if (jsonArrayfareRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fare_rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fare_rules` to be an array in the JSON string but got `%s`", jsonObj.get("fare_rules").toString()));
          }

          // validate the optional field `fare_rules` (array)
          for (int i = 0; i < jsonArrayfareRules.size(); i++) {
            FareRule.validateJsonElement(jsonArrayfareRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CfarCreateExerciseItinerary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CfarCreateExerciseItinerary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CfarCreateExerciseItinerary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CfarCreateExerciseItinerary.class));

       return (TypeAdapter<T>) new TypeAdapter<CfarCreateExerciseItinerary>() {
           @Override
           public void write(JsonWriter out, CfarCreateExerciseItinerary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CfarCreateExerciseItinerary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CfarCreateExerciseItinerary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CfarCreateExerciseItinerary
   * @throws IOException if the JSON string is invalid with respect to CfarCreateExerciseItinerary
   */
  public static CfarCreateExerciseItinerary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CfarCreateExerciseItinerary.class);
  }

  /**
   * Convert an instance of CfarCreateExerciseItinerary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

