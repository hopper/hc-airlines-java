/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.Android;
import com.hopper.cloud.airlines.model.ChromeOs;
import com.hopper.cloud.airlines.model.IOs;
import com.hopper.cloud.airlines.model.Linux;
import com.hopper.cloud.airlines.model.MacOs;
import com.hopper.cloud.airlines.model.OtherOs;
import com.hopper.cloud.airlines.model.Windows;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.hopper.cloud.airlines.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-02T17:40:08.115903591Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class OperatingSystem extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(OperatingSystem.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OperatingSystem.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OperatingSystem' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Android> adapterAndroid = gson.getDelegateAdapter(this, TypeToken.get(Android.class));
            final TypeAdapter<ChromeOs> adapterChromeOs = gson.getDelegateAdapter(this, TypeToken.get(ChromeOs.class));
            final TypeAdapter<IOs> adapterIOs = gson.getDelegateAdapter(this, TypeToken.get(IOs.class));
            final TypeAdapter<Linux> adapterLinux = gson.getDelegateAdapter(this, TypeToken.get(Linux.class));
            final TypeAdapter<MacOs> adapterMacOs = gson.getDelegateAdapter(this, TypeToken.get(MacOs.class));
            final TypeAdapter<OtherOs> adapterOtherOs = gson.getDelegateAdapter(this, TypeToken.get(OtherOs.class));
            final TypeAdapter<Windows> adapterWindows = gson.getDelegateAdapter(this, TypeToken.get(Windows.class));

            return (TypeAdapter<T>) new TypeAdapter<OperatingSystem>() {
                @Override
                public void write(JsonWriter out, OperatingSystem value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Android`
                    if (value.getActualInstance() instanceof Android) {
                        JsonElement element = adapterAndroid.toJsonTree((Android)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChromeOs`
                    if (value.getActualInstance() instanceof ChromeOs) {
                        JsonElement element = adapterChromeOs.toJsonTree((ChromeOs)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IOs`
                    if (value.getActualInstance() instanceof IOs) {
                        JsonElement element = adapterIOs.toJsonTree((IOs)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Linux`
                    if (value.getActualInstance() instanceof Linux) {
                        JsonElement element = adapterLinux.toJsonTree((Linux)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MacOs`
                    if (value.getActualInstance() instanceof MacOs) {
                        JsonElement element = adapterMacOs.toJsonTree((MacOs)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OtherOs`
                    if (value.getActualInstance() instanceof OtherOs) {
                        JsonElement element = adapterOtherOs.toJsonTree((OtherOs)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Windows`
                    if (value.getActualInstance() instanceof Windows) {
                        JsonElement element = adapterWindows.toJsonTree((Windows)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: Android, ChromeOs, IOs, Linux, MacOs, OtherOs, Windows");
                }

                @Override
                public OperatingSystem read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Android
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Android.validateJsonElement(jsonElement);
                        actualAdapter = adapterAndroid;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Android'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Android failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Android'", e);
                    }
                    // deserialize ChromeOs
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChromeOs.validateJsonElement(jsonElement);
                        actualAdapter = adapterChromeOs;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChromeOs'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChromeOs failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChromeOs'", e);
                    }
                    // deserialize IOs
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IOs.validateJsonElement(jsonElement);
                        actualAdapter = adapterIOs;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IOs'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IOs failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IOs'", e);
                    }
                    // deserialize Linux
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Linux.validateJsonElement(jsonElement);
                        actualAdapter = adapterLinux;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Linux'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Linux failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Linux'", e);
                    }
                    // deserialize MacOs
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MacOs.validateJsonElement(jsonElement);
                        actualAdapter = adapterMacOs;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MacOs'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MacOs failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MacOs'", e);
                    }
                    // deserialize OtherOs
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OtherOs.validateJsonElement(jsonElement);
                        actualAdapter = adapterOtherOs;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OtherOs'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OtherOs failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OtherOs'", e);
                    }
                    // deserialize Windows
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Windows.validateJsonElement(jsonElement);
                        actualAdapter = adapterWindows;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Windows'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Windows failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Windows'", e);
                    }

                    if (match == 1) {
                        OperatingSystem ret = new OperatingSystem();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for OperatingSystem: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public OperatingSystem() {
        super("oneOf", Boolean.FALSE);
    }

    public OperatingSystem(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Android", Android.class);
        schemas.put("ChromeOs", ChromeOs.class);
        schemas.put("IOs", IOs.class);
        schemas.put("Linux", Linux.class);
        schemas.put("MacOs", MacOs.class);
        schemas.put("OtherOs", OtherOs.class);
        schemas.put("Windows", Windows.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return OperatingSystem.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Android, ChromeOs, IOs, Linux, MacOs, OtherOs, Windows
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Android) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChromeOs) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IOs) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Linux) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MacOs) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OtherOs) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Windows) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Android, ChromeOs, IOs, Linux, MacOs, OtherOs, Windows");
    }

    /**
     * Get the actual instance, which can be the following:
     * Android, ChromeOs, IOs, Linux, MacOs, OtherOs, Windows
     *
     * @return The actual instance (Android, ChromeOs, IOs, Linux, MacOs, OtherOs, Windows)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Android`. If the actual instance is not `Android`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Android`
     * @throws ClassCastException if the instance is not `Android`
     */
    public Android getAndroid() throws ClassCastException {
        return (Android)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ChromeOs`. If the actual instance is not `ChromeOs`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChromeOs`
     * @throws ClassCastException if the instance is not `ChromeOs`
     */
    public ChromeOs getChromeOs() throws ClassCastException {
        return (ChromeOs)super.getActualInstance();
    }

    /**
     * Get the actual instance of `IOs`. If the actual instance is not `IOs`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IOs`
     * @throws ClassCastException if the instance is not `IOs`
     */
    public IOs getIOs() throws ClassCastException {
        return (IOs)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Linux`. If the actual instance is not `Linux`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Linux`
     * @throws ClassCastException if the instance is not `Linux`
     */
    public Linux getLinux() throws ClassCastException {
        return (Linux)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MacOs`. If the actual instance is not `MacOs`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MacOs`
     * @throws ClassCastException if the instance is not `MacOs`
     */
    public MacOs getMacOs() throws ClassCastException {
        return (MacOs)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OtherOs`. If the actual instance is not `OtherOs`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OtherOs`
     * @throws ClassCastException if the instance is not `OtherOs`
     */
    public OtherOs getOtherOs() throws ClassCastException {
        return (OtherOs)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Windows`. If the actual instance is not `Windows`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Windows`
     * @throws ClassCastException if the instance is not `Windows`
     */
    public Windows getWindows() throws ClassCastException {
        return (Windows)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OperatingSystem
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Android
        try {
            Android.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Android failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChromeOs
        try {
            ChromeOs.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChromeOs failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IOs
        try {
            IOs.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IOs failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Linux
        try {
            Linux.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Linux failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MacOs
        try {
            MacOs.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MacOs failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OtherOs
        try {
            OtherOs.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OtherOs failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Windows
        try {
            Windows.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Windows failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for OperatingSystem with oneOf schemas: Android, ChromeOs, IOs, Linux, MacOs, OtherOs, Windows. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of OperatingSystem given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OperatingSystem
     * @throws IOException if the JSON string is invalid with respect to OperatingSystem
     */
    public static OperatingSystem fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OperatingSystem.class);
    }

    /**
     * Convert an instance of OperatingSystem to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

