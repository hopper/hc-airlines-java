/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.Cabin;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * An object detailing a segment of a fare slice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DgItinerarySliceSegment {
  public static final String SERIALIZED_NAME_SEGMENT_ID = "segment_id";
  @SerializedName(SERIALIZED_NAME_SEGMENT_ID)
  @javax.annotation.Nullable
  private String segmentId;

  public static final String SERIALIZED_NAME_ORIGIN_AIRPORT = "origin_airport";
  @SerializedName(SERIALIZED_NAME_ORIGIN_AIRPORT)
    private String originAirport;

  public static final String SERIALIZED_NAME_DESTINATION_AIRPORT = "destination_airport";
  @SerializedName(SERIALIZED_NAME_DESTINATION_AIRPORT)
    private String destinationAirport;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE_TIME = "departure_date_time";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE_TIME)
    private String departureDateTime;

  public static final String SERIALIZED_NAME_ARRIVAL_DATE_TIME = "arrival_date_time";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE_TIME)
    private String arrivalDateTime;

  public static final String SERIALIZED_NAME_FLIGHT_NUMBER = "flight_number";
  @SerializedName(SERIALIZED_NAME_FLIGHT_NUMBER)
    private String flightNumber;

  public static final String SERIALIZED_NAME_VALIDATING_CARRIER_CODE = "validating_carrier_code";
  @SerializedName(SERIALIZED_NAME_VALIDATING_CARRIER_CODE)
    private String validatingCarrierCode;

  public static final String SERIALIZED_NAME_CABIN = "cabin";
  @SerializedName(SERIALIZED_NAME_CABIN)
    private Cabin cabin;

  public static final String SERIALIZED_NAME_FARE_BRAND = "fare_brand";
  @SerializedName(SERIALIZED_NAME_FARE_BRAND)
  @javax.annotation.Nullable
  private String fareBrand;

  public DgItinerarySliceSegment() {
  }

  public DgItinerarySliceSegment segmentId(@javax.annotation.Nullable String segmentId) {
    this.segmentId = segmentId;
    return this;
  }

  /**
   * A unique identifier for the segment
   * @return segmentId
   */
  @javax.annotation.Nullable
  public String getSegmentId() {
    return segmentId;
  }

  public void setSegmentId(@javax.annotation.Nullable String segmentId) {
    this.segmentId = segmentId;
  }


  public DgItinerarySliceSegment originAirport(String originAirport) {
    this.originAirport = originAirport;
    return this;
  }

  /**
   * IATA airport code of origin
   * @return originAirport
   */
    public String getOriginAirport() {
    return originAirport;
  }

  public void setOriginAirport(String originAirport) {
    this.originAirport = originAirport;
  }


  public DgItinerarySliceSegment destinationAirport(String destinationAirport) {
    this.destinationAirport = destinationAirport;
    return this;
  }

  /**
   * IATA airport code of destination
   * @return destinationAirport
   */
    public String getDestinationAirport() {
    return destinationAirport;
  }

  public void setDestinationAirport(String destinationAirport) {
    this.destinationAirport = destinationAirport;
  }


  public DgItinerarySliceSegment departureDateTime(String departureDateTime) {
    this.departureDateTime = departureDateTime;
    return this;
  }

  /**
   * The local date and time of departure in ISO Local Date Time format
   * @return departureDateTime
   */
    public String getDepartureDateTime() {
    return departureDateTime;
  }

  public void setDepartureDateTime(String departureDateTime) {
    this.departureDateTime = departureDateTime;
  }


  public DgItinerarySliceSegment arrivalDateTime(String arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
    return this;
  }

  /**
   * The local date and time of arrival in ISO Local Date Time format
   * @return arrivalDateTime
   */
    public String getArrivalDateTime() {
    return arrivalDateTime;
  }

  public void setArrivalDateTime(String arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
  }


  public DgItinerarySliceSegment flightNumber(String flightNumber) {
    this.flightNumber = flightNumber;
    return this;
  }

  /**
   * The number of the flight
   * @return flightNumber
   */
    public String getFlightNumber() {
    return flightNumber;
  }

  public void setFlightNumber(String flightNumber) {
    this.flightNumber = flightNumber;
  }


  public DgItinerarySliceSegment validatingCarrierCode(String validatingCarrierCode) {
    this.validatingCarrierCode = validatingCarrierCode;
    return this;
  }

  /**
   * The IATA airline code of the validating carrier for this segment
   * @return validatingCarrierCode
   */
    public String getValidatingCarrierCode() {
    return validatingCarrierCode;
  }

  public void setValidatingCarrierCode(String validatingCarrierCode) {
    this.validatingCarrierCode = validatingCarrierCode;
  }


  public DgItinerarySliceSegment cabin(Cabin cabin) {
    this.cabin = cabin;
    return this;
  }

  /**
   * Get cabin
   * @return cabin
   */
    public Cabin getCabin() {
    return cabin;
  }

  public void setCabin(Cabin cabin) {
    this.cabin = cabin;
  }


  public DgItinerarySliceSegment fareBrand(@javax.annotation.Nullable String fareBrand) {
    this.fareBrand = fareBrand;
    return this;
  }

  /**
   * Name of the fare brand applied to the segment (if applicable)
   * @return fareBrand
   */
  @javax.annotation.Nullable
  public String getFareBrand() {
    return fareBrand;
  }

  public void setFareBrand(@javax.annotation.Nullable String fareBrand) {
    this.fareBrand = fareBrand;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DgItinerarySliceSegment dgItinerarySliceSegment = (DgItinerarySliceSegment) o;
    return Objects.equals(this.segmentId, dgItinerarySliceSegment.segmentId) &&
        Objects.equals(this.originAirport, dgItinerarySliceSegment.originAirport) &&
        Objects.equals(this.destinationAirport, dgItinerarySliceSegment.destinationAirport) &&
        Objects.equals(this.departureDateTime, dgItinerarySliceSegment.departureDateTime) &&
        Objects.equals(this.arrivalDateTime, dgItinerarySliceSegment.arrivalDateTime) &&
        Objects.equals(this.flightNumber, dgItinerarySliceSegment.flightNumber) &&
        Objects.equals(this.validatingCarrierCode, dgItinerarySliceSegment.validatingCarrierCode) &&
        Objects.equals(this.cabin, dgItinerarySliceSegment.cabin) &&
        Objects.equals(this.fareBrand, dgItinerarySliceSegment.fareBrand);
  }

  @Override
  public int hashCode() {
    return Objects.hash(segmentId, originAirport, destinationAirport, departureDateTime, arrivalDateTime, flightNumber, validatingCarrierCode, cabin, fareBrand);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DgItinerarySliceSegment {\n");
    sb.append("    segmentId: ").append(toIndentedString(segmentId)).append("\n");
    sb.append("    originAirport: ").append(toIndentedString(originAirport)).append("\n");
    sb.append("    destinationAirport: ").append(toIndentedString(destinationAirport)).append("\n");
    sb.append("    departureDateTime: ").append(toIndentedString(departureDateTime)).append("\n");
    sb.append("    arrivalDateTime: ").append(toIndentedString(arrivalDateTime)).append("\n");
    sb.append("    flightNumber: ").append(toIndentedString(flightNumber)).append("\n");
    sb.append("    validatingCarrierCode: ").append(toIndentedString(validatingCarrierCode)).append("\n");
    sb.append("    cabin: ").append(toIndentedString(cabin)).append("\n");
    sb.append("    fareBrand: ").append(toIndentedString(fareBrand)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("segment_id");
    openapiFields.add("origin_airport");
    openapiFields.add("destination_airport");
    openapiFields.add("departure_date_time");
    openapiFields.add("arrival_date_time");
    openapiFields.add("flight_number");
    openapiFields.add("validating_carrier_code");
    openapiFields.add("cabin");
    openapiFields.add("fare_brand");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("origin_airport");
    openapiRequiredFields.add("destination_airport");
    openapiRequiredFields.add("departure_date_time");
    openapiRequiredFields.add("arrival_date_time");
    openapiRequiredFields.add("flight_number");
    openapiRequiredFields.add("validating_carrier_code");
    openapiRequiredFields.add("cabin");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DgItinerarySliceSegment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DgItinerarySliceSegment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DgItinerarySliceSegment is not found in the empty JSON string", DgItinerarySliceSegment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DgItinerarySliceSegment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DgItinerarySliceSegment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DgItinerarySliceSegment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("segment_id") != null && !jsonObj.get("segment_id").isJsonNull()) && !jsonObj.get("segment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segment_id").toString()));
      }
      if (!jsonObj.get("origin_airport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin_airport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin_airport").toString()));
      }
      if (!jsonObj.get("destination_airport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_airport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_airport").toString()));
      }
      if (!jsonObj.get("departure_date_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departure_date_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departure_date_time").toString()));
      }
      if (!jsonObj.get("arrival_date_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arrival_date_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arrival_date_time").toString()));
      }
      if (!jsonObj.get("flight_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flight_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flight_number").toString()));
      }
      if (!jsonObj.get("validating_carrier_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validating_carrier_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validating_carrier_code").toString()));
      }
      // validate the required field `cabin`
      Cabin.validateJsonElement(jsonObj.get("cabin"));
      if ((jsonObj.get("fare_brand") != null && !jsonObj.get("fare_brand").isJsonNull()) && !jsonObj.get("fare_brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fare_brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fare_brand").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DgItinerarySliceSegment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DgItinerarySliceSegment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DgItinerarySliceSegment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DgItinerarySliceSegment.class));

       return (TypeAdapter<T>) new TypeAdapter<DgItinerarySliceSegment>() {
           @Override
           public void write(JsonWriter out, DgItinerarySliceSegment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DgItinerarySliceSegment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DgItinerarySliceSegment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DgItinerarySliceSegment
   * @throws IOException if the JSON string is invalid with respect to DgItinerarySliceSegment
   */
  public static DgItinerarySliceSegment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DgItinerarySliceSegment.class);
  }

  /**
   * Convert an instance of DgItinerarySliceSegment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

