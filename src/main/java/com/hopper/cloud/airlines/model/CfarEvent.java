/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.BookingConfirmed1;
import com.hopper.cloud.airlines.model.CfarDenyPurchase;
import com.hopper.cloud.airlines.model.CfarEventWithContract;
import com.hopper.cloud.airlines.model.CfarExerciseCallbackLaunched;
import com.hopper.cloud.airlines.model.CfarExerciseCustomerDataComplete;
import com.hopper.cloud.airlines.model.CfarExercisePortalComplete;
import com.hopper.cloud.airlines.model.CfarExercisePortalDisplay;
import com.hopper.cloud.airlines.model.CfarExerciseVerificationComplete;
import com.hopper.cloud.airlines.model.CfarExerciseVerificationSent;
import com.hopper.cloud.airlines.model.CfarForcedChoiceWarning;
import com.hopper.cloud.airlines.model.CfarOffersBannerDisplay;
import com.hopper.cloud.airlines.model.CfarOffersTakeoverDisplay;
import com.hopper.cloud.airlines.model.CfarViewInfo;
import com.hopper.cloud.airlines.model.ExerciseStepResult;
import com.hopper.cloud.airlines.model.OffersDisplayed1;
import com.hopper.cloud.airlines.model.UiSource;
import com.hopper.cloud.airlines.model.UiVariant;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.hopper.cloud.airlines.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-02T17:40:08.115903591Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class CfarEvent extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CfarEvent.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CfarEvent.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CfarEvent' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<BookingConfirmed1> adapterBookingConfirmed1 = gson.getDelegateAdapter(this, TypeToken.get(BookingConfirmed1.class));
            final TypeAdapter<CfarDenyPurchase> adapterCfarDenyPurchase = gson.getDelegateAdapter(this, TypeToken.get(CfarDenyPurchase.class));
            final TypeAdapter<CfarEventWithContract> adapterCfarEventWithContract = gson.getDelegateAdapter(this, TypeToken.get(CfarEventWithContract.class));
            final TypeAdapter<CfarExerciseCallbackLaunched> adapterCfarExerciseCallbackLaunched = gson.getDelegateAdapter(this, TypeToken.get(CfarExerciseCallbackLaunched.class));
            final TypeAdapter<CfarExerciseCustomerDataComplete> adapterCfarExerciseCustomerDataComplete = gson.getDelegateAdapter(this, TypeToken.get(CfarExerciseCustomerDataComplete.class));
            final TypeAdapter<CfarExercisePortalComplete> adapterCfarExercisePortalComplete = gson.getDelegateAdapter(this, TypeToken.get(CfarExercisePortalComplete.class));
            final TypeAdapter<CfarExercisePortalDisplay> adapterCfarExercisePortalDisplay = gson.getDelegateAdapter(this, TypeToken.get(CfarExercisePortalDisplay.class));
            final TypeAdapter<CfarExerciseVerificationComplete> adapterCfarExerciseVerificationComplete = gson.getDelegateAdapter(this, TypeToken.get(CfarExerciseVerificationComplete.class));
            final TypeAdapter<CfarExerciseVerificationSent> adapterCfarExerciseVerificationSent = gson.getDelegateAdapter(this, TypeToken.get(CfarExerciseVerificationSent.class));
            final TypeAdapter<CfarForcedChoiceWarning> adapterCfarForcedChoiceWarning = gson.getDelegateAdapter(this, TypeToken.get(CfarForcedChoiceWarning.class));
            final TypeAdapter<CfarOffersBannerDisplay> adapterCfarOffersBannerDisplay = gson.getDelegateAdapter(this, TypeToken.get(CfarOffersBannerDisplay.class));
            final TypeAdapter<CfarOffersTakeoverDisplay> adapterCfarOffersTakeoverDisplay = gson.getDelegateAdapter(this, TypeToken.get(CfarOffersTakeoverDisplay.class));
            final TypeAdapter<CfarViewInfo> adapterCfarViewInfo = gson.getDelegateAdapter(this, TypeToken.get(CfarViewInfo.class));
            final TypeAdapter<OffersDisplayed1> adapterOffersDisplayed1 = gson.getDelegateAdapter(this, TypeToken.get(OffersDisplayed1.class));

            return (TypeAdapter<T>) new TypeAdapter<CfarEvent>() {
                @Override
                public void write(JsonWriter out, CfarEvent value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `BookingConfirmed1`
                    if (value.getActualInstance() instanceof BookingConfirmed1) {
                        JsonElement element = adapterBookingConfirmed1.toJsonTree((BookingConfirmed1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarDenyPurchase`
                    if (value.getActualInstance() instanceof CfarDenyPurchase) {
                        JsonElement element = adapterCfarDenyPurchase.toJsonTree((CfarDenyPurchase)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarEventWithContract`
                    if (value.getActualInstance() instanceof CfarEventWithContract) {
                        JsonElement element = adapterCfarEventWithContract.toJsonTree((CfarEventWithContract)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarExerciseCallbackLaunched`
                    if (value.getActualInstance() instanceof CfarExerciseCallbackLaunched) {
                        JsonElement element = adapterCfarExerciseCallbackLaunched.toJsonTree((CfarExerciseCallbackLaunched)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarExerciseCustomerDataComplete`
                    if (value.getActualInstance() instanceof CfarExerciseCustomerDataComplete) {
                        JsonElement element = adapterCfarExerciseCustomerDataComplete.toJsonTree((CfarExerciseCustomerDataComplete)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarExercisePortalComplete`
                    if (value.getActualInstance() instanceof CfarExercisePortalComplete) {
                        JsonElement element = adapterCfarExercisePortalComplete.toJsonTree((CfarExercisePortalComplete)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarExercisePortalDisplay`
                    if (value.getActualInstance() instanceof CfarExercisePortalDisplay) {
                        JsonElement element = adapterCfarExercisePortalDisplay.toJsonTree((CfarExercisePortalDisplay)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarExerciseVerificationComplete`
                    if (value.getActualInstance() instanceof CfarExerciseVerificationComplete) {
                        JsonElement element = adapterCfarExerciseVerificationComplete.toJsonTree((CfarExerciseVerificationComplete)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarExerciseVerificationSent`
                    if (value.getActualInstance() instanceof CfarExerciseVerificationSent) {
                        JsonElement element = adapterCfarExerciseVerificationSent.toJsonTree((CfarExerciseVerificationSent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarForcedChoiceWarning`
                    if (value.getActualInstance() instanceof CfarForcedChoiceWarning) {
                        JsonElement element = adapterCfarForcedChoiceWarning.toJsonTree((CfarForcedChoiceWarning)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarOffersBannerDisplay`
                    if (value.getActualInstance() instanceof CfarOffersBannerDisplay) {
                        JsonElement element = adapterCfarOffersBannerDisplay.toJsonTree((CfarOffersBannerDisplay)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarOffersTakeoverDisplay`
                    if (value.getActualInstance() instanceof CfarOffersTakeoverDisplay) {
                        JsonElement element = adapterCfarOffersTakeoverDisplay.toJsonTree((CfarOffersTakeoverDisplay)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CfarViewInfo`
                    if (value.getActualInstance() instanceof CfarViewInfo) {
                        JsonElement element = adapterCfarViewInfo.toJsonTree((CfarViewInfo)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OffersDisplayed1`
                    if (value.getActualInstance() instanceof OffersDisplayed1) {
                        JsonElement element = adapterOffersDisplayed1.toJsonTree((OffersDisplayed1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: BookingConfirmed1, CfarDenyPurchase, CfarEventWithContract, CfarExerciseCallbackLaunched, CfarExerciseCustomerDataComplete, CfarExercisePortalComplete, CfarExercisePortalDisplay, CfarExerciseVerificationComplete, CfarExerciseVerificationSent, CfarForcedChoiceWarning, CfarOffersBannerDisplay, CfarOffersTakeoverDisplay, CfarViewInfo, OffersDisplayed1");
                }

                @Override
                public CfarEvent read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize BookingConfirmed1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BookingConfirmed1.validateJsonElement(jsonElement);
                        actualAdapter = adapterBookingConfirmed1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BookingConfirmed1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BookingConfirmed1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BookingConfirmed1'", e);
                    }
                    // deserialize CfarDenyPurchase
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarDenyPurchase.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarDenyPurchase;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarDenyPurchase'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarDenyPurchase failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarDenyPurchase'", e);
                    }
                    // deserialize CfarEventWithContract
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarEventWithContract.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarEventWithContract;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarEventWithContract'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarEventWithContract failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarEventWithContract'", e);
                    }
                    // deserialize CfarExerciseCallbackLaunched
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarExerciseCallbackLaunched.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarExerciseCallbackLaunched;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarExerciseCallbackLaunched'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarExerciseCallbackLaunched failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarExerciseCallbackLaunched'", e);
                    }
                    // deserialize CfarExerciseCustomerDataComplete
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarExerciseCustomerDataComplete.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarExerciseCustomerDataComplete;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarExerciseCustomerDataComplete'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarExerciseCustomerDataComplete failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarExerciseCustomerDataComplete'", e);
                    }
                    // deserialize CfarExercisePortalComplete
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarExercisePortalComplete.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarExercisePortalComplete;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarExercisePortalComplete'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarExercisePortalComplete failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarExercisePortalComplete'", e);
                    }
                    // deserialize CfarExercisePortalDisplay
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarExercisePortalDisplay.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarExercisePortalDisplay;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarExercisePortalDisplay'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarExercisePortalDisplay failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarExercisePortalDisplay'", e);
                    }
                    // deserialize CfarExerciseVerificationComplete
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarExerciseVerificationComplete.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarExerciseVerificationComplete;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarExerciseVerificationComplete'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarExerciseVerificationComplete failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarExerciseVerificationComplete'", e);
                    }
                    // deserialize CfarExerciseVerificationSent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarExerciseVerificationSent.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarExerciseVerificationSent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarExerciseVerificationSent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarExerciseVerificationSent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarExerciseVerificationSent'", e);
                    }
                    // deserialize CfarForcedChoiceWarning
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarForcedChoiceWarning.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarForcedChoiceWarning;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarForcedChoiceWarning'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarForcedChoiceWarning failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarForcedChoiceWarning'", e);
                    }
                    // deserialize CfarOffersBannerDisplay
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarOffersBannerDisplay.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarOffersBannerDisplay;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarOffersBannerDisplay'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarOffersBannerDisplay failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarOffersBannerDisplay'", e);
                    }
                    // deserialize CfarOffersTakeoverDisplay
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarOffersTakeoverDisplay.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarOffersTakeoverDisplay;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarOffersTakeoverDisplay'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarOffersTakeoverDisplay failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarOffersTakeoverDisplay'", e);
                    }
                    // deserialize CfarViewInfo
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CfarViewInfo.validateJsonElement(jsonElement);
                        actualAdapter = adapterCfarViewInfo;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CfarViewInfo'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CfarViewInfo failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CfarViewInfo'", e);
                    }
                    // deserialize OffersDisplayed1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OffersDisplayed1.validateJsonElement(jsonElement);
                        actualAdapter = adapterOffersDisplayed1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OffersDisplayed1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OffersDisplayed1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OffersDisplayed1'", e);
                    }

                    if (match == 1) {
                        CfarEvent ret = new CfarEvent();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CfarEvent: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CfarEvent() {
        super("oneOf", Boolean.FALSE);
    }

    public CfarEvent(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("BookingConfirmed1", BookingConfirmed1.class);
        schemas.put("CfarDenyPurchase", CfarDenyPurchase.class);
        schemas.put("CfarEventWithContract", CfarEventWithContract.class);
        schemas.put("CfarExerciseCallbackLaunched", CfarExerciseCallbackLaunched.class);
        schemas.put("CfarExerciseCustomerDataComplete", CfarExerciseCustomerDataComplete.class);
        schemas.put("CfarExercisePortalComplete", CfarExercisePortalComplete.class);
        schemas.put("CfarExercisePortalDisplay", CfarExercisePortalDisplay.class);
        schemas.put("CfarExerciseVerificationComplete", CfarExerciseVerificationComplete.class);
        schemas.put("CfarExerciseVerificationSent", CfarExerciseVerificationSent.class);
        schemas.put("CfarForcedChoiceWarning", CfarForcedChoiceWarning.class);
        schemas.put("CfarOffersBannerDisplay", CfarOffersBannerDisplay.class);
        schemas.put("CfarOffersTakeoverDisplay", CfarOffersTakeoverDisplay.class);
        schemas.put("CfarViewInfo", CfarViewInfo.class);
        schemas.put("OffersDisplayed1", OffersDisplayed1.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CfarEvent.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * BookingConfirmed1, CfarDenyPurchase, CfarEventWithContract, CfarExerciseCallbackLaunched, CfarExerciseCustomerDataComplete, CfarExercisePortalComplete, CfarExercisePortalDisplay, CfarExerciseVerificationComplete, CfarExerciseVerificationSent, CfarForcedChoiceWarning, CfarOffersBannerDisplay, CfarOffersTakeoverDisplay, CfarViewInfo, OffersDisplayed1
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof BookingConfirmed1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarDenyPurchase) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarEventWithContract) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarExerciseCallbackLaunched) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarExerciseCustomerDataComplete) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarExercisePortalComplete) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarExercisePortalDisplay) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarExerciseVerificationComplete) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarExerciseVerificationSent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarForcedChoiceWarning) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarOffersBannerDisplay) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarOffersTakeoverDisplay) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CfarViewInfo) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OffersDisplayed1) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be BookingConfirmed1, CfarDenyPurchase, CfarEventWithContract, CfarExerciseCallbackLaunched, CfarExerciseCustomerDataComplete, CfarExercisePortalComplete, CfarExercisePortalDisplay, CfarExerciseVerificationComplete, CfarExerciseVerificationSent, CfarForcedChoiceWarning, CfarOffersBannerDisplay, CfarOffersTakeoverDisplay, CfarViewInfo, OffersDisplayed1");
    }

    /**
     * Get the actual instance, which can be the following:
     * BookingConfirmed1, CfarDenyPurchase, CfarEventWithContract, CfarExerciseCallbackLaunched, CfarExerciseCustomerDataComplete, CfarExercisePortalComplete, CfarExercisePortalDisplay, CfarExerciseVerificationComplete, CfarExerciseVerificationSent, CfarForcedChoiceWarning, CfarOffersBannerDisplay, CfarOffersTakeoverDisplay, CfarViewInfo, OffersDisplayed1
     *
     * @return The actual instance (BookingConfirmed1, CfarDenyPurchase, CfarEventWithContract, CfarExerciseCallbackLaunched, CfarExerciseCustomerDataComplete, CfarExercisePortalComplete, CfarExercisePortalDisplay, CfarExerciseVerificationComplete, CfarExerciseVerificationSent, CfarForcedChoiceWarning, CfarOffersBannerDisplay, CfarOffersTakeoverDisplay, CfarViewInfo, OffersDisplayed1)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `BookingConfirmed1`. If the actual instance is not `BookingConfirmed1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BookingConfirmed1`
     * @throws ClassCastException if the instance is not `BookingConfirmed1`
     */
    public BookingConfirmed1 getBookingConfirmed1() throws ClassCastException {
        return (BookingConfirmed1)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarDenyPurchase`. If the actual instance is not `CfarDenyPurchase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarDenyPurchase`
     * @throws ClassCastException if the instance is not `CfarDenyPurchase`
     */
    public CfarDenyPurchase getCfarDenyPurchase() throws ClassCastException {
        return (CfarDenyPurchase)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarEventWithContract`. If the actual instance is not `CfarEventWithContract`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarEventWithContract`
     * @throws ClassCastException if the instance is not `CfarEventWithContract`
     */
    public CfarEventWithContract getCfarEventWithContract() throws ClassCastException {
        return (CfarEventWithContract)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarExerciseCallbackLaunched`. If the actual instance is not `CfarExerciseCallbackLaunched`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarExerciseCallbackLaunched`
     * @throws ClassCastException if the instance is not `CfarExerciseCallbackLaunched`
     */
    public CfarExerciseCallbackLaunched getCfarExerciseCallbackLaunched() throws ClassCastException {
        return (CfarExerciseCallbackLaunched)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarExerciseCustomerDataComplete`. If the actual instance is not `CfarExerciseCustomerDataComplete`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarExerciseCustomerDataComplete`
     * @throws ClassCastException if the instance is not `CfarExerciseCustomerDataComplete`
     */
    public CfarExerciseCustomerDataComplete getCfarExerciseCustomerDataComplete() throws ClassCastException {
        return (CfarExerciseCustomerDataComplete)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarExercisePortalComplete`. If the actual instance is not `CfarExercisePortalComplete`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarExercisePortalComplete`
     * @throws ClassCastException if the instance is not `CfarExercisePortalComplete`
     */
    public CfarExercisePortalComplete getCfarExercisePortalComplete() throws ClassCastException {
        return (CfarExercisePortalComplete)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarExercisePortalDisplay`. If the actual instance is not `CfarExercisePortalDisplay`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarExercisePortalDisplay`
     * @throws ClassCastException if the instance is not `CfarExercisePortalDisplay`
     */
    public CfarExercisePortalDisplay getCfarExercisePortalDisplay() throws ClassCastException {
        return (CfarExercisePortalDisplay)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarExerciseVerificationComplete`. If the actual instance is not `CfarExerciseVerificationComplete`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarExerciseVerificationComplete`
     * @throws ClassCastException if the instance is not `CfarExerciseVerificationComplete`
     */
    public CfarExerciseVerificationComplete getCfarExerciseVerificationComplete() throws ClassCastException {
        return (CfarExerciseVerificationComplete)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarExerciseVerificationSent`. If the actual instance is not `CfarExerciseVerificationSent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarExerciseVerificationSent`
     * @throws ClassCastException if the instance is not `CfarExerciseVerificationSent`
     */
    public CfarExerciseVerificationSent getCfarExerciseVerificationSent() throws ClassCastException {
        return (CfarExerciseVerificationSent)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarForcedChoiceWarning`. If the actual instance is not `CfarForcedChoiceWarning`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarForcedChoiceWarning`
     * @throws ClassCastException if the instance is not `CfarForcedChoiceWarning`
     */
    public CfarForcedChoiceWarning getCfarForcedChoiceWarning() throws ClassCastException {
        return (CfarForcedChoiceWarning)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarOffersBannerDisplay`. If the actual instance is not `CfarOffersBannerDisplay`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarOffersBannerDisplay`
     * @throws ClassCastException if the instance is not `CfarOffersBannerDisplay`
     */
    public CfarOffersBannerDisplay getCfarOffersBannerDisplay() throws ClassCastException {
        return (CfarOffersBannerDisplay)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarOffersTakeoverDisplay`. If the actual instance is not `CfarOffersTakeoverDisplay`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarOffersTakeoverDisplay`
     * @throws ClassCastException if the instance is not `CfarOffersTakeoverDisplay`
     */
    public CfarOffersTakeoverDisplay getCfarOffersTakeoverDisplay() throws ClassCastException {
        return (CfarOffersTakeoverDisplay)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CfarViewInfo`. If the actual instance is not `CfarViewInfo`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CfarViewInfo`
     * @throws ClassCastException if the instance is not `CfarViewInfo`
     */
    public CfarViewInfo getCfarViewInfo() throws ClassCastException {
        return (CfarViewInfo)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OffersDisplayed1`. If the actual instance is not `OffersDisplayed1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OffersDisplayed1`
     * @throws ClassCastException if the instance is not `OffersDisplayed1`
     */
    public OffersDisplayed1 getOffersDisplayed1() throws ClassCastException {
        return (OffersDisplayed1)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CfarEvent
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with BookingConfirmed1
        try {
            BookingConfirmed1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BookingConfirmed1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarDenyPurchase
        try {
            CfarDenyPurchase.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarDenyPurchase failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarEventWithContract
        try {
            CfarEventWithContract.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarEventWithContract failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarExerciseCallbackLaunched
        try {
            CfarExerciseCallbackLaunched.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarExerciseCallbackLaunched failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarExerciseCustomerDataComplete
        try {
            CfarExerciseCustomerDataComplete.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarExerciseCustomerDataComplete failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarExercisePortalComplete
        try {
            CfarExercisePortalComplete.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarExercisePortalComplete failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarExercisePortalDisplay
        try {
            CfarExercisePortalDisplay.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarExercisePortalDisplay failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarExerciseVerificationComplete
        try {
            CfarExerciseVerificationComplete.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarExerciseVerificationComplete failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarExerciseVerificationSent
        try {
            CfarExerciseVerificationSent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarExerciseVerificationSent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarForcedChoiceWarning
        try {
            CfarForcedChoiceWarning.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarForcedChoiceWarning failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarOffersBannerDisplay
        try {
            CfarOffersBannerDisplay.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarOffersBannerDisplay failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarOffersTakeoverDisplay
        try {
            CfarOffersTakeoverDisplay.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarOffersTakeoverDisplay failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CfarViewInfo
        try {
            CfarViewInfo.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CfarViewInfo failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OffersDisplayed1
        try {
            OffersDisplayed1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OffersDisplayed1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for CfarEvent with oneOf schemas: BookingConfirmed1, CfarDenyPurchase, CfarEventWithContract, CfarExerciseCallbackLaunched, CfarExerciseCustomerDataComplete, CfarExercisePortalComplete, CfarExercisePortalDisplay, CfarExerciseVerificationComplete, CfarExerciseVerificationSent, CfarForcedChoiceWarning, CfarOffersBannerDisplay, CfarOffersTakeoverDisplay, CfarViewInfo, OffersDisplayed1. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of CfarEvent given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CfarEvent
     * @throws IOException if the JSON string is invalid with respect to CfarEvent
     */
    public static CfarEvent fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CfarEvent.class);
    }

    /**
     * Convert an instance of CfarEvent to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

