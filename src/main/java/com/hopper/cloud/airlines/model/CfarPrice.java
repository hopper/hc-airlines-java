/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * An object detailing a CFAR price
 */
@ApiModel(description = "An object detailing a CFAR price")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CfarPrice {
    public static final String SERIALIZED_NAME_PASSENGER_TYPE = "passenger_type";
    @SerializedName(SERIALIZED_NAME_PASSENGER_TYPE)
    private PassengerType passengerType;

    public static final String SERIALIZED_NAME_NB_PAX = "nb_pax";
    @SerializedName(SERIALIZED_NAME_NB_PAX)
    private Integer nbPax;

    public static final String SERIALIZED_NAME_COVERAGE = "coverage";
    @SerializedName(SERIALIZED_NAME_COVERAGE)
    private String coverage;

    public static final String SERIALIZED_NAME_PREMIUM = "premium";
    @SerializedName(SERIALIZED_NAME_PREMIUM)
    private String premium;

    public static final String SERIALIZED_NAME_ANCILLARY_TYPE = "ancillary_type";
    @SerializedName(SERIALIZED_NAME_ANCILLARY_TYPE)
    private AncillaryType ancillaryType;

    public static final String SERIALIZED_NAME_PASSENGER_REFERENCE = "passenger_reference";
    @SerializedName(SERIALIZED_NAME_PASSENGER_REFERENCE)
    private String passengerReference;

    public static final String SERIALIZED_NAME_CFAR_PRICE_TYPE = "cfar_price_type";
    @SerializedName(SERIALIZED_NAME_CFAR_PRICE_TYPE)
    private CfarPriceType cfarPriceType;

    public CfarPrice() {
    }

    public CfarPrice passengerType(PassengerType passengerType) {
        this.passengerType = passengerType;
        return this;
    }

    /**
     * Get passenger type
     * @return type
     **/
    @ApiModelProperty(value = "")
    public PassengerType getPassengerType() {
        return passengerType;
    }


    public void setPassengerType(PassengerType passengerType) {
        this.passengerType = passengerType;
    }

    public CfarPrice nbPax(Integer nbPax) {

        this.nbPax = nbPax;
        return this;
    }

    /**
     * Number of passengers
     * @return nbPax
     **/
    @ApiModelProperty(example = "3", value = "Number of passengers")

    public Integer getNbPax() {
        return nbPax;
    }


    public void setNbPax(Integer nbPax) {
        this.nbPax = nbPax;
    }


    public CfarPrice premium(String premium) {

        this.premium = premium;
        return this;
    }

    /**
     * Premium
     * @return premium
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(example = "20.80", required = true, value = "Premium")

    public String getPremium() {
        return premium;
    }


    public void setPremium(String premium) {
        this.premium = premium;
    }


    public CfarPrice coverage(String coverage) {

        this.coverage = coverage;
        return this;
    }

    /**
     * Coverage
     * @return coverage
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(example = "180.60", required = true, value = "Coverage")

    public String getCoverage() {
        return coverage;
    }


    public void setCoverage(String coverage) {
        this.coverage = coverage;
    }

    public CfarPrice passengerReference(String passengerReference) {
        this.passengerReference = passengerReference;
        return this;
    }

    public String getPassengerReference() {
        return passengerReference;
    }

    public void setPassengerReference(String passengerReference) {
        this.passengerReference = passengerReference;
    }

    public CfarPrice ancillaryType(AncillaryType ancillaryType) {

        this.ancillaryType = ancillaryType;
        return this;
    }

    /**
     * Get ancillary type
     * @return type
     **/
    @ApiModelProperty(value = "Ancillary type")
    public AncillaryType getAncillaryType() {
        return ancillaryType;
    }


    public void setAncillaryType(AncillaryType ancillaryType) {
        this.ancillaryType = ancillaryType;
    }

    public CfarPrice cfarPriceType(CfarPriceType cfarPriceType) {

        this.cfarPriceType = cfarPriceType;
        return this;
    }

    /**
     * Get price type
     * @return type
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Price type")
    public CfarPriceType getCfarPriceType() {
        return cfarPriceType;
    }


    public void setCfarPriceType(CfarPriceType cfarPriceType) {
        this.cfarPriceType = cfarPriceType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CfarPrice cfarPrice = (CfarPrice) o;
        return Objects.equals(this.passengerType, cfarPrice.passengerType) &&
                Objects.equals(this.nbPax, cfarPrice.nbPax) &&
                Objects.equals(this.coverage, cfarPrice.coverage) &&
                Objects.equals(this.premium, cfarPrice.premium) &&
                Objects.equals(this.ancillaryType, cfarPrice.ancillaryType) &&
                Objects.equals(this.passengerReference, cfarPrice.passengerReference) &&
                Objects.equals(this.cfarPriceType, cfarPrice.cfarPriceType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(passengerType, nbPax, coverage, premium, ancillaryType, passengerReference, cfarPriceType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CfarPrice {\n");
        sb.append("    passengerType: ").append(toIndentedString(passengerType)).append("\n");
        sb.append("    nbPax: ").append(toIndentedString(nbPax)).append("\n");
        sb.append("    coverage: ").append(toIndentedString(coverage)).append("\n");
        sb.append("    premium: ").append(toIndentedString(premium)).append("\n");
        sb.append("    ancillaryType: ").append(toIndentedString(ancillaryType)).append("\n");
        sb.append("    passengerReference: ").append(toIndentedString(passengerReference)).append("\n");
        sb.append("    cfarPriceType: ").append(toIndentedString(cfarPriceType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("passenger_type");
        openapiFields.add("nb_pax");
        openapiFields.add("coverage");
        openapiFields.add("premium");
        openapiFields.add("ancillary_type");
        openapiFields.add("passenger_reference");
        openapiFields.add("cfar_price_type");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("coverage");
        openapiRequiredFields.add("premium");
        openapiRequiredFields.add("cfar_price_type");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to CfarPrice
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (CfarPrice.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in CfarPrice is not found in the empty JSON string", CfarPrice.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CfarPrice.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CfarPrice` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CfarPrice.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("passenger_reference") != null && !jsonObj.get("passenger_reference").isJsonPrimitive() && !jsonObj.get("passenger_reference").isJsonNull()) {
            throw new IllegalArgumentException(String.format("Expected the field `passenger_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passenger_reference").toString()));
        }
        if (jsonObj.get("passenger_type") != null && !jsonObj.get("passenger_type").isJsonPrimitive() && !jsonObj.get("passenger_type").isJsonNull()) {
            throw new IllegalArgumentException(String.format("Expected the field `passenger_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passenger_type").toString()));
        }
        if (jsonObj.get("nb_pax") != null && !jsonObj.get("nb_pax").isJsonPrimitive() && !jsonObj.get("nb_pax").isJsonNull()) {
            throw new IllegalArgumentException(String.format("Expected the field `nb_pax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nb_pax").toString()));
        }
        if (jsonObj.get("ancillary_type") != null && !jsonObj.get("ancillary_type").isJsonPrimitive() && !jsonObj.get("ancillary_type").isJsonNull()) {
            throw new IllegalArgumentException(String.format("Expected the field `ancillary_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ancillary_type").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CfarPrice.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CfarPrice' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CfarPrice> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(CfarPrice.class));

            return (TypeAdapter<T>) new TypeAdapter<CfarPrice>() {
                @Override
                public void write(JsonWriter out, CfarPrice value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CfarPrice read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CfarPrice given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CfarPrice
     * @throws IOException if the JSON string is invalid with respect to CfarPrice
     */
    public static CfarPrice fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CfarPrice.class);
    }

    /**
     * Convert an instance of CfarPrice to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

