/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.CreateAirlineDgSessionRequest;
import com.hopper.cloud.airlines.model.DgItinerary;
import com.hopper.cloud.airlines.model.DgRequestType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * A create DG offers request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-02T18:35:20.974206513Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class CreateDgOffersRequest {
  public static final String SERIALIZED_NAME_ITINERARY = "itinerary";
  @SerializedName(SERIALIZED_NAME_ITINERARY)
  @javax.annotation.Nonnull
  private List<DgItinerary> itinerary;

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "request_type";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  @javax.annotation.Nonnull
  private DgRequestType requestType;

  public static final String SERIALIZED_NAME_BOOKING_DATE_TIME = "booking_date_time";
  @SerializedName(SERIALIZED_NAME_BOOKING_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime bookingDateTime;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  @javax.annotation.Nullable
  private CreateAirlineDgSessionRequest session;

  public static final String SERIALIZED_NAME_EXT_ATTRIBUTES = "ext_attributes";
  @SerializedName(SERIALIZED_NAME_EXT_ATTRIBUTES)
  @javax.annotation.Nonnull
  private Map<String, String> extAttributes;

  public CreateDgOffersRequest() {
  }

  public CreateDgOffersRequest itinerary(@javax.annotation.Nonnull List<DgItinerary> itinerary) {
    this.itinerary = itinerary;
    return this;
  }

  public CreateDgOffersRequest addItineraryItem(DgItinerary itineraryItem) {
    if (this.itinerary == null) {
      this.itinerary = new ArrayList<>();
    }
    this.itinerary.add(itineraryItem);
    return this;
  }

  /**
   * An object detailing the itinerary and fare used to create a DG offer
   * @return itinerary
   */
  @javax.annotation.Nonnull
  public List<DgItinerary> getItinerary() {
    return itinerary;
  }

  public void setItinerary(@javax.annotation.Nonnull List<DgItinerary> itinerary) {
    this.itinerary = itinerary;
  }


  public CreateDgOffersRequest requestType(@javax.annotation.Nonnull DgRequestType requestType) {
    this.requestType = requestType;
    return this;
  }

  /**
   * Get requestType
   * @return requestType
   */
  @javax.annotation.Nonnull
  public DgRequestType getRequestType() {
    return requestType;
  }

  public void setRequestType(@javax.annotation.Nonnull DgRequestType requestType) {
    this.requestType = requestType;
  }


  public CreateDgOffersRequest bookingDateTime(@javax.annotation.Nullable OffsetDateTime bookingDateTime) {
    this.bookingDateTime = bookingDateTime;
    return this;
  }

  /**
   * A UTC RFC3339 datetime; the date and time at which the booking was made. To be used only with the request type \&quot;post_booking\&quot;
   * @return bookingDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBookingDateTime() {
    return bookingDateTime;
  }

  public void setBookingDateTime(@javax.annotation.Nullable OffsetDateTime bookingDateTime) {
    this.bookingDateTime = bookingDateTime;
  }


  public CreateDgOffersRequest session(@javax.annotation.Nullable CreateAirlineDgSessionRequest session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nullable
  public CreateAirlineDgSessionRequest getSession() {
    return session;
  }

  public void setSession(@javax.annotation.Nullable CreateAirlineDgSessionRequest session) {
    this.session = session;
  }


  public CreateDgOffersRequest extAttributes(@javax.annotation.Nonnull Map<String, String> extAttributes) {
    this.extAttributes = extAttributes;
    return this;
  }

  public CreateDgOffersRequest putExtAttributesItem(String key, String extAttributesItem) {
    if (this.extAttributes == null) {
      this.extAttributes = new HashMap<>();
    }
    this.extAttributes.put(key, extAttributesItem);
    return this;
  }

  /**
   * Get extAttributes
   * @return extAttributes
   */
  @javax.annotation.Nonnull
  public Map<String, String> getExtAttributes() {
    return extAttributes;
  }

  public void setExtAttributes(@javax.annotation.Nonnull Map<String, String> extAttributes) {
    this.extAttributes = extAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDgOffersRequest createDgOffersRequest = (CreateDgOffersRequest) o;
    return Objects.equals(this.itinerary, createDgOffersRequest.itinerary) &&
        Objects.equals(this.requestType, createDgOffersRequest.requestType) &&
        Objects.equals(this.bookingDateTime, createDgOffersRequest.bookingDateTime) &&
        Objects.equals(this.session, createDgOffersRequest.session) &&
        Objects.equals(this.extAttributes, createDgOffersRequest.extAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itinerary, requestType, bookingDateTime, session, extAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDgOffersRequest {\n");
    sb.append("    itinerary: ").append(toIndentedString(itinerary)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    bookingDateTime: ").append(toIndentedString(bookingDateTime)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    extAttributes: ").append(toIndentedString(extAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itinerary");
    openapiFields.add("request_type");
    openapiFields.add("booking_date_time");
    openapiFields.add("session");
    openapiFields.add("ext_attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("itinerary");
    openapiRequiredFields.add("request_type");
    openapiRequiredFields.add("ext_attributes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDgOffersRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDgOffersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDgOffersRequest is not found in the empty JSON string", CreateDgOffersRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDgOffersRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDgOffersRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDgOffersRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("itinerary").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itinerary` to be an array in the JSON string but got `%s`", jsonObj.get("itinerary").toString()));
      }

      JsonArray jsonArrayitinerary = jsonObj.getAsJsonArray("itinerary");
      // validate the required field `itinerary` (array)
      for (int i = 0; i < jsonArrayitinerary.size(); i++) {
        DgItinerary.validateJsonElement(jsonArrayitinerary.get(i));
      };
      // validate the required field `request_type`
      DgRequestType.validateJsonElement(jsonObj.get("request_type"));
      // validate the optional field `session`
      if (jsonObj.get("session") != null && !jsonObj.get("session").isJsonNull()) {
        CreateAirlineDgSessionRequest.validateJsonElement(jsonObj.get("session"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDgOffersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDgOffersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDgOffersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDgOffersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDgOffersRequest>() {
           @Override
           public void write(JsonWriter out, CreateDgOffersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDgOffersRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDgOffersRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDgOffersRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDgOffersRequest
   */
  public static CreateDgOffersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDgOffersRequest.class);
  }

  /**
   * Convert an instance of CreateDgOffersRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

