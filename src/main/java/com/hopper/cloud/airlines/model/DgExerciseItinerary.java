/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.DgExerciseItinerarySlice;
import com.hopper.cloud.airlines.model.DgPassenger;
import com.hopper.cloud.airlines.model.DgPassengerCount;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * Itinerary of the user when the contract exercise was initiated (only active segments should be provided)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DgExerciseItinerary {
  public static final String SERIALIZED_NAME_PASSENGER_COUNT = "passenger_count";
  @SerializedName(SERIALIZED_NAME_PASSENGER_COUNT)
    private List<DgPassengerCount> passengerCount = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLICES = "slices";
  @SerializedName(SERIALIZED_NAME_SLICES)
    private List<DgExerciseItinerarySlice> slices = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSENGERS = "passengers";
  @SerializedName(SERIALIZED_NAME_PASSENGERS)
  @javax.annotation.Nullable
  private List<DgPassenger> passengers = new ArrayList<>();

  public DgExerciseItinerary() {
  }

  public DgExerciseItinerary passengerCount(List<DgPassengerCount> passengerCount) {
    this.passengerCount = passengerCount;
    return this;
  }

  public DgExerciseItinerary addPassengerCountItem(DgPassengerCount passengerCountItem) {
    if (this.passengerCount == null) {
      this.passengerCount = new ArrayList<>();
    }
    this.passengerCount.add(passengerCountItem);
    return this;
  }

  /**
   * List of passengers type and count for the itinerary
   * @return passengerCount
   */
    public List<DgPassengerCount> getPassengerCount() {
    return passengerCount;
  }

  public void setPassengerCount(List<DgPassengerCount> passengerCount) {
    this.passengerCount = passengerCount;
  }


  public DgExerciseItinerary slices(List<DgExerciseItinerarySlice> slices) {
    this.slices = slices;
    return this;
  }

  public DgExerciseItinerary addSlicesItem(DgExerciseItinerarySlice slicesItem) {
    if (this.slices == null) {
      this.slices = new ArrayList<>();
    }
    this.slices.add(slicesItem);
    return this;
  }

  /**
   * List of slices of the itinerary; 1 (one way),  2 (round trip) or up to 10 (multi-destination) slices are allowed
   * @return slices
   */
    public List<DgExerciseItinerarySlice> getSlices() {
    return slices;
  }

  public void setSlices(List<DgExerciseItinerarySlice> slices) {
    this.slices = slices;
  }


  public DgExerciseItinerary passengers(@javax.annotation.Nullable List<DgPassenger> passengers) {
    this.passengers = passengers;
    return this;
  }

  public DgExerciseItinerary addPassengersItem(DgPassenger passengersItem) {
    if (this.passengers == null) {
      this.passengers = new ArrayList<>();
    }
    this.passengers.add(passengersItem);
    return this;
  }

  /**
   * Details of the passengers
   * @return passengers
   */
  @javax.annotation.Nullable
  public List<DgPassenger> getPassengers() {
    return passengers;
  }

  public void setPassengers(@javax.annotation.Nullable List<DgPassenger> passengers) {
    this.passengers = passengers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DgExerciseItinerary dgExerciseItinerary = (DgExerciseItinerary) o;
    return Objects.equals(this.passengerCount, dgExerciseItinerary.passengerCount) &&
        Objects.equals(this.slices, dgExerciseItinerary.slices) &&
        Objects.equals(this.passengers, dgExerciseItinerary.passengers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passengerCount, slices, passengers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DgExerciseItinerary {\n");
    sb.append("    passengerCount: ").append(toIndentedString(passengerCount)).append("\n");
    sb.append("    slices: ").append(toIndentedString(slices)).append("\n");
    sb.append("    passengers: ").append(toIndentedString(passengers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("passenger_count");
    openapiFields.add("slices");
    openapiFields.add("passengers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("passenger_count");
    openapiRequiredFields.add("slices");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DgExerciseItinerary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DgExerciseItinerary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DgExerciseItinerary is not found in the empty JSON string", DgExerciseItinerary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DgExerciseItinerary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DgExerciseItinerary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DgExerciseItinerary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("passenger_count").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `passenger_count` to be an array in the JSON string but got `%s`", jsonObj.get("passenger_count").toString()));
      }

      JsonArray jsonArraypassengerCount = jsonObj.getAsJsonArray("passenger_count");
      // validate the required field `passenger_count` (array)
      for (int i = 0; i < jsonArraypassengerCount.size(); i++) {
        DgPassengerCount.validateJsonElement(jsonArraypassengerCount.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("slices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `slices` to be an array in the JSON string but got `%s`", jsonObj.get("slices").toString()));
      }

      JsonArray jsonArrayslices = jsonObj.getAsJsonArray("slices");
      // validate the required field `slices` (array)
      for (int i = 0; i < jsonArrayslices.size(); i++) {
        DgExerciseItinerarySlice.validateJsonElement(jsonArrayslices.get(i));
      };
      if (jsonObj.get("passengers") != null && !jsonObj.get("passengers").isJsonNull()) {
        JsonArray jsonArraypassengers = jsonObj.getAsJsonArray("passengers");
        if (jsonArraypassengers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("passengers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `passengers` to be an array in the JSON string but got `%s`", jsonObj.get("passengers").toString()));
          }

          // validate the optional field `passengers` (array)
          for (int i = 0; i < jsonArraypassengers.size(); i++) {
            DgPassenger.validateJsonElement(jsonArraypassengers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DgExerciseItinerary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DgExerciseItinerary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DgExerciseItinerary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DgExerciseItinerary.class));

       return (TypeAdapter<T>) new TypeAdapter<DgExerciseItinerary>() {
           @Override
           public void write(JsonWriter out, DgExerciseItinerary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DgExerciseItinerary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DgExerciseItinerary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DgExerciseItinerary
   * @throws IOException if the JSON string is invalid with respect to DgExerciseItinerary
   */
  public static DgExerciseItinerary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DgExerciseItinerary.class);
  }

  /**
   * Convert an instance of DgExerciseItinerary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

