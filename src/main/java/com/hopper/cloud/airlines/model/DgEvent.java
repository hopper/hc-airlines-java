/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.BookingConfirmed2;
import com.hopper.cloud.airlines.model.DgDenyPurchase;
import com.hopper.cloud.airlines.model.DgExerciseCallbackLaunched;
import com.hopper.cloud.airlines.model.DgExerciseCustomerDataComplete;
import com.hopper.cloud.airlines.model.DgExercisePortalComplete;
import com.hopper.cloud.airlines.model.DgExerciseVerificationComplete;
import com.hopper.cloud.airlines.model.DgOfferSelected;
import com.hopper.cloud.airlines.model.DgOffersBannerDisplay;
import com.hopper.cloud.airlines.model.DgOffersBannerLoaded;
import com.hopper.cloud.airlines.model.DgOffersMoreInfoClicked;
import com.hopper.cloud.airlines.model.ExerciseStepResult;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.hopper.cloud.airlines.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-19T17:27:15.383558719Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class DgEvent extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(DgEvent.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DgEvent.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DgEvent' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<BookingConfirmed2> adapterBookingConfirmed2 = gson.getDelegateAdapter(this, TypeToken.get(BookingConfirmed2.class));
            final TypeAdapter<DgDenyPurchase> adapterDgDenyPurchase = gson.getDelegateAdapter(this, TypeToken.get(DgDenyPurchase.class));
            final TypeAdapter<DgExerciseCallbackLaunched> adapterDgExerciseCallbackLaunched = gson.getDelegateAdapter(this, TypeToken.get(DgExerciseCallbackLaunched.class));
            final TypeAdapter<DgExerciseCustomerDataComplete> adapterDgExerciseCustomerDataComplete = gson.getDelegateAdapter(this, TypeToken.get(DgExerciseCustomerDataComplete.class));
            final TypeAdapter<DgExercisePortalComplete> adapterDgExercisePortalComplete = gson.getDelegateAdapter(this, TypeToken.get(DgExercisePortalComplete.class));
            final TypeAdapter<DgExerciseVerificationComplete> adapterDgExerciseVerificationComplete = gson.getDelegateAdapter(this, TypeToken.get(DgExerciseVerificationComplete.class));
            final TypeAdapter<DgOfferSelected> adapterDgOfferSelected = gson.getDelegateAdapter(this, TypeToken.get(DgOfferSelected.class));
            final TypeAdapter<DgOffersBannerDisplay> adapterDgOffersBannerDisplay = gson.getDelegateAdapter(this, TypeToken.get(DgOffersBannerDisplay.class));
            final TypeAdapter<DgOffersBannerLoaded> adapterDgOffersBannerLoaded = gson.getDelegateAdapter(this, TypeToken.get(DgOffersBannerLoaded.class));
            final TypeAdapter<DgOffersMoreInfoClicked> adapterDgOffersMoreInfoClicked = gson.getDelegateAdapter(this, TypeToken.get(DgOffersMoreInfoClicked.class));

            return (TypeAdapter<T>) new TypeAdapter<DgEvent>() {
                @Override
                public void write(JsonWriter out, DgEvent value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `BookingConfirmed2`
                    if (value.getActualInstance() instanceof BookingConfirmed2) {
                        JsonElement element = adapterBookingConfirmed2.toJsonTree((BookingConfirmed2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DgDenyPurchase`
                    if (value.getActualInstance() instanceof DgDenyPurchase) {
                        JsonElement element = adapterDgDenyPurchase.toJsonTree((DgDenyPurchase) value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DgExerciseCallbackLaunched`
                    if (value.getActualInstance() instanceof DgExerciseCallbackLaunched) {
                        JsonElement element = adapterDgExerciseCallbackLaunched.toJsonTree((DgExerciseCallbackLaunched)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DgExerciseCustomerDataComplete`
                    if (value.getActualInstance() instanceof DgExerciseCustomerDataComplete) {
                        JsonElement element = adapterDgExerciseCustomerDataComplete.toJsonTree((DgExerciseCustomerDataComplete)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DgExercisePortalComplete`
                    if (value.getActualInstance() instanceof DgExercisePortalComplete) {
                        JsonElement element = adapterDgExercisePortalComplete.toJsonTree((DgExercisePortalComplete)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DgExerciseVerificationComplete`
                    if (value.getActualInstance() instanceof DgExerciseVerificationComplete) {
                        JsonElement element = adapterDgExerciseVerificationComplete.toJsonTree((DgExerciseVerificationComplete)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DgOfferSelected`
                    if (value.getActualInstance() instanceof DgOfferSelected) {
                        JsonElement element = adapterDgOfferSelected.toJsonTree((DgOfferSelected) value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DgOffersBannerDisplay`
                    if (value.getActualInstance() instanceof DgOffersBannerDisplay) {
                        JsonElement element = adapterDgOffersBannerDisplay.toJsonTree((DgOffersBannerDisplay) value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DgOffersBannerLoaded`
                    if (value.getActualInstance() instanceof DgOffersBannerLoaded) {
                        JsonElement element = adapterDgOffersBannerLoaded.toJsonTree((DgOffersBannerLoaded) value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DgOffersMoreInfoClicked`
                    if (value.getActualInstance() instanceof DgOffersMoreInfoClicked) {
                        JsonElement element = adapterDgOffersMoreInfoClicked.toJsonTree((DgOffersMoreInfoClicked) value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: BookingConfirmed2, DgDenyPurchase, DgExerciseCallbackLaunched, DgExerciseCustomerDataComplete, DgExercisePortalComplete, DgExerciseVerificationComplete, DgOfferSelected, DgOffersBannerDisplay, DgOffersBannerLoaded, DgOffersMoreInfoClicked");
                }

                @Override
                public DgEvent read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize BookingConfirmed2
                    try {
                        actualAdapter = adapterBookingConfirmed2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BookingConfirmed2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BookingConfirmed2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BookingConfirmed2'", e);
                    }
                    // deserialize DgDenyPurchase
                    try {
                        actualAdapter = adapterDgDenyPurchase;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DgDenyPurchase'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DgDenyPurchase failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DgDenyPurchase'", e);
                    }
                    // deserialize DgExerciseCallbackLaunched
                    try {
                        actualAdapter = adapterDgExerciseCallbackLaunched;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DgExerciseCallbackLaunched'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DgExerciseCallbackLaunched failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DgExerciseCallbackLaunched'", e);
                    }
                    // deserialize DgExerciseCustomerDataComplete
                    try {
                        actualAdapter = adapterDgExerciseCustomerDataComplete;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DgExerciseCustomerDataComplete'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DgExerciseCustomerDataComplete failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DgExerciseCustomerDataComplete'", e);
                    }
                    // deserialize DgExercisePortalComplete
                    try {
                        actualAdapter = adapterDgExercisePortalComplete;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DgExercisePortalComplete'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DgExercisePortalComplete failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DgExercisePortalComplete'", e);
                    }
                    // deserialize DgExerciseVerificationComplete
                    try {
                        actualAdapter = adapterDgExerciseVerificationComplete;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DgExerciseVerificationComplete'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DgExerciseVerificationComplete failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DgExerciseVerificationComplete'", e);
                    }
                    // deserialize DgOfferSelected
                    try {
                        actualAdapter = adapterDgOfferSelected;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DgOfferSelected'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DgOfferSelected failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DgOfferSelected'", e);
                    }
                    // deserialize DgOffersBannerDisplay
                    try {
                        actualAdapter = adapterDgOffersBannerDisplay;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DgOffersBannerDisplay'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DgOffersBannerDisplay failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DgOffersBannerDisplay'", e);
                    }
                    // deserialize DgOffersBannerLoaded
                    try {
                        actualAdapter = adapterDgOffersBannerLoaded;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DgOffersBannerLoaded'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DgOffersBannerLoaded failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DgOffersBannerLoaded'", e);
                    }
                    // deserialize DgOffersMoreInfoClicked
                    try {
                        actualAdapter = adapterDgOffersMoreInfoClicked;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DgOffersMoreInfoClicked'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DgOffersMoreInfoClicked failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DgOffersMoreInfoClicked'", e);
                    }

                    if (match == 1) {
                        DgEvent ret = new DgEvent();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for DgEvent: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public DgEvent() {
        super("oneOf", Boolean.FALSE);
    }

    public DgEvent(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("BookingConfirmed2", BookingConfirmed2.class);
        schemas.put("DgDenyPurchase", DgDenyPurchase.class);
        schemas.put("DgExerciseCallbackLaunched", DgExerciseCallbackLaunched.class);
        schemas.put("DgExerciseCustomerDataComplete", DgExerciseCustomerDataComplete.class);
        schemas.put("DgExercisePortalComplete", DgExercisePortalComplete.class);
        schemas.put("DgExerciseVerificationComplete", DgExerciseVerificationComplete.class);
        schemas.put("DgOfferSelected", DgOfferSelected.class);
        schemas.put("DgOffersBannerDisplay", DgOffersBannerDisplay.class);
        schemas.put("DgOffersBannerLoaded", DgOffersBannerLoaded.class);
        schemas.put("DgOffersMoreInfoClicked", DgOffersMoreInfoClicked.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return DgEvent.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * BookingConfirmed2, DgDenyPurchase, DgExerciseCallbackLaunched, DgExerciseCustomerDataComplete, DgExercisePortalComplete, DgExerciseVerificationComplete, DgOfferSelected, DgOffersBannerDisplay, DgOffersBannerLoaded, DgOffersMoreInfoClicked
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof BookingConfirmed2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DgDenyPurchase) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DgExerciseCallbackLaunched) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DgExerciseCustomerDataComplete) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DgExercisePortalComplete) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DgExerciseVerificationComplete) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DgOfferSelected) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DgOffersBannerDisplay) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DgOffersBannerLoaded) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DgOffersMoreInfoClicked) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be BookingConfirmed2, DgDenyPurchase, DgExerciseCallbackLaunched, DgExerciseCustomerDataComplete, DgExercisePortalComplete, DgExerciseVerificationComplete, DgOfferSelected, DgOffersBannerDisplay, DgOffersBannerLoaded, DgOffersMoreInfoClicked");
    }

    /**
     * Get the actual instance, which can be the following:
     * BookingConfirmed2, DgDenyPurchase, DgExerciseCallbackLaunched, DgExerciseCustomerDataComplete, DgExercisePortalComplete, DgExerciseVerificationComplete, DgOfferSelected, DgOffersBannerDisplay, DgOffersBannerLoaded, DgOffersMoreInfoClicked
     *
     * @return The actual instance (BookingConfirmed2, DgDenyPurchase, DgExerciseCallbackLaunched, DgExerciseCustomerDataComplete, DgExercisePortalComplete, DgExerciseVerificationComplete, DgOfferSelected, DgOffersBannerDisplay, DgOffersBannerLoaded, DgOffersMoreInfoClicked)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `BookingConfirmed2`. If the actual instance is not `BookingConfirmed2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BookingConfirmed2`
     * @throws ClassCastException if the instance is not `BookingConfirmed2`
     */
    public BookingConfirmed2 getBookingConfirmed2() throws ClassCastException {
        return (BookingConfirmed2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DgDenyPurchase`. If the actual instance is not `DgDenyPurchase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DgDenyPurchase`
     * @throws ClassCastException if the instance is not `DgDenyPurchase`
     */
    public DgDenyPurchase getDgDenyPurchase() throws ClassCastException {
        return (DgDenyPurchase) super.getActualInstance();
    }

    /**
     * Get the actual instance of `DgExerciseCallbackLaunched`. If the actual instance is not `DgExerciseCallbackLaunched`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DgExerciseCallbackLaunched`
     * @throws ClassCastException if the instance is not `DgExerciseCallbackLaunched`
     */
    public DgExerciseCallbackLaunched getDgExerciseCallbackLaunched() throws ClassCastException {
        return (DgExerciseCallbackLaunched)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DgExerciseCustomerDataComplete`. If the actual instance is not `DgExerciseCustomerDataComplete`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DgExerciseCustomerDataComplete`
     * @throws ClassCastException if the instance is not `DgExerciseCustomerDataComplete`
     */
    public DgExerciseCustomerDataComplete getDgExerciseCustomerDataComplete() throws ClassCastException {
        return (DgExerciseCustomerDataComplete)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DgExercisePortalComplete`. If the actual instance is not `DgExercisePortalComplete`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DgExercisePortalComplete`
     * @throws ClassCastException if the instance is not `DgExercisePortalComplete`
     */
    public DgExercisePortalComplete getDgExercisePortalComplete() throws ClassCastException {
        return (DgExercisePortalComplete)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DgExerciseVerificationComplete`. If the actual instance is not `DgExerciseVerificationComplete`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DgExerciseVerificationComplete`
     * @throws ClassCastException if the instance is not `DgExerciseVerificationComplete`
     */
    public DgExerciseVerificationComplete getDgExerciseVerificationComplete() throws ClassCastException {
        return (DgExerciseVerificationComplete)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DgOfferSelected`. If the actual instance is not `DgOfferSelected`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DgOfferSelected`
     * @throws ClassCastException if the instance is not `DgOfferSelected`
     */
    public DgOfferSelected getDgOfferSelected() throws ClassCastException {
        return (DgOfferSelected) super.getActualInstance();
    }

    /**
     * Get the actual instance of `DgOffersBannerDisplay`. If the actual instance is not `DgOffersBannerDisplay`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DgOffersBannerDisplay`
     * @throws ClassCastException if the instance is not `DgOffersBannerDisplay`
     */
    public DgOffersBannerDisplay getDgOffersBannerDisplay() throws ClassCastException {
        return (DgOffersBannerDisplay) super.getActualInstance();
    }

    /**
     * Get the actual instance of `DgOffersBannerLoaded`. If the actual instance is not `DgOffersBannerLoaded`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DgOffersBannerLoaded`
     * @throws ClassCastException if the instance is not `DgOffersBannerLoaded`
     */
    public DgOffersBannerLoaded getDgOffersBannerLoaded() throws ClassCastException {
        return (DgOffersBannerLoaded) super.getActualInstance();
    }

    /**
     * Get the actual instance of `DgOffersMoreInfoClicked`. If the actual instance is not `DgOffersMoreInfoClicked`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DgOffersMoreInfoClicked`
     * @throws ClassCastException if the instance is not `DgOffersMoreInfoClicked`
     */
    public DgOffersMoreInfoClicked getDgOffersMoreInfoClicked() throws ClassCastException {
        return (DgOffersMoreInfoClicked) super.getActualInstance();
    }

    /**
     * Create an instance of DgEvent given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DgEvent
     * @throws IOException if the JSON string is invalid with respect to DgEvent
     */
    public static DgEvent fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DgEvent.class);
    }

    /**
     * Convert an instance of DgEvent to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

