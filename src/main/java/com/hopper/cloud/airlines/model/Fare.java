/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.FareRule;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * Fare
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class Fare {
  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private String price;

  public static final String SERIALIZED_NAME_FARE_BRAND = "fare_brand";
  @SerializedName(SERIALIZED_NAME_FARE_BRAND)
  @javax.annotation.Nullable
  private String fareBrand;

  public static final String SERIALIZED_NAME_FARE_BASIS = "fare_basis";
  @SerializedName(SERIALIZED_NAME_FARE_BASIS)
  @javax.annotation.Nullable
  private String fareBasis;

  public static final String SERIALIZED_NAME_FARE_RULES = "fare_rules";
  @SerializedName(SERIALIZED_NAME_FARE_RULES)
  @javax.annotation.Nullable
  private List<FareRule> fareRules = new ArrayList<>();

  public Fare() {
  }

  public Fare price(@javax.annotation.Nullable String price) {
    this.price = price;
    return this;
  }

  /**
   * The price of the slice for all the passengers with this fare
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable String price) {
    this.price = price;
  }


  public Fare fareBrand(@javax.annotation.Nullable String fareBrand) {
    this.fareBrand = fareBrand;
    return this;
  }

  /**
   * Name of the fare brand of this fare
   * @return fareBrand
   */
  @javax.annotation.Nullable
  public String getFareBrand() {
    return fareBrand;
  }

  public void setFareBrand(@javax.annotation.Nullable String fareBrand) {
    this.fareBrand = fareBrand;
  }


  public Fare fareBasis(@javax.annotation.Nullable String fareBasis) {
    this.fareBasis = fareBasis;
    return this;
  }

  /**
   * Code of the fare basis applied to this fare
   * @return fareBasis
   */
  @javax.annotation.Nullable
  public String getFareBasis() {
    return fareBasis;
  }

  public void setFareBasis(@javax.annotation.Nullable String fareBasis) {
    this.fareBasis = fareBasis;
  }


  public Fare fareRules(@javax.annotation.Nullable List<FareRule> fareRules) {
    this.fareRules = fareRules;
    return this;
  }

  public Fare addFareRulesItem(FareRule fareRulesItem) {
    if (this.fareRules == null) {
      this.fareRules = new ArrayList<>();
    }
    this.fareRules.add(fareRulesItem);
    return this;
  }

  /**
   * The fare rules associated to the fare
   * @return fareRules
   */
  @javax.annotation.Nullable
  public List<FareRule> getFareRules() {
    return fareRules;
  }

  public void setFareRules(@javax.annotation.Nullable List<FareRule> fareRules) {
    this.fareRules = fareRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fare fare = (Fare) o;
    return Objects.equals(this.price, fare.price) &&
        Objects.equals(this.fareBrand, fare.fareBrand) &&
        Objects.equals(this.fareBasis, fare.fareBasis) &&
        Objects.equals(this.fareRules, fare.fareRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(price, fareBrand, fareBasis, fareRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fare {\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    fareBrand: ").append(toIndentedString(fareBrand)).append("\n");
    sb.append("    fareBasis: ").append(toIndentedString(fareBasis)).append("\n");
    sb.append("    fareRules: ").append(toIndentedString(fareRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("price");
    openapiFields.add("fare_brand");
    openapiFields.add("fare_basis");
    openapiFields.add("fare_rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Fare
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Fare.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Fare is not found in the empty JSON string", Fare.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Fare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Fare` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if ((jsonObj.get("fare_brand") != null && !jsonObj.get("fare_brand").isJsonNull()) && !jsonObj.get("fare_brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fare_brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fare_brand").toString()));
      }
      if ((jsonObj.get("fare_basis") != null && !jsonObj.get("fare_basis").isJsonNull()) && !jsonObj.get("fare_basis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fare_basis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fare_basis").toString()));
      }
      if (jsonObj.get("fare_rules") != null && !jsonObj.get("fare_rules").isJsonNull()) {
        JsonArray jsonArrayfareRules = jsonObj.getAsJsonArray("fare_rules");
        if (jsonArrayfareRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fare_rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fare_rules` to be an array in the JSON string but got `%s`", jsonObj.get("fare_rules").toString()));
          }

          // validate the optional field `fare_rules` (array)
          for (int i = 0; i < jsonArrayfareRules.size(); i++) {
            FareRule.validateJsonElement(jsonArrayfareRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Fare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Fare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Fare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Fare.class));

       return (TypeAdapter<T>) new TypeAdapter<Fare>() {
           @Override
           public void write(JsonWriter out, Fare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Fare read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Fare given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Fare
   * @throws IOException if the JSON string is invalid with respect to Fare
   */
  public static Fare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Fare.class);
  }

  /**
   * Convert an instance of Fare to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

