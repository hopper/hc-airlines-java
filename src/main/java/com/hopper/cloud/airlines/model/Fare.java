/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * An object detailing a fare
 */
@ApiModel(description = "An object detailing a fare")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-28T12:18:49.517876+02:00[Europe/Paris]")
@JsonInclude(JsonInclude.Include. NON_NULL)
public class Fare {
  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_FARE_BRAND = "fare_brand";
  @SerializedName(SERIALIZED_NAME_FARE_BRAND)
  private String fareBrand;

  public static final String SERIALIZED_NAME_FARE_BASIS = "fare_basis";
  @SerializedName(SERIALIZED_NAME_FARE_BASIS)
  private String fareBasis;

  public static final String SERIALIZED_NAME_FARE_RULES = "fare_rules";
  @SerializedName(SERIALIZED_NAME_FARE_RULES)
  private List<FareRule> fareRules = null;

  public Fare() { 
  }

  public Fare price(String price) {
      this.price = price;
      return this;
  }

  /**
   * The price of the slice for all the passengers with this fare
   * @return price
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "401.10", required = true, value = "The price of the slice for all the passengers with this fare")
  public String getPrice() {
        return price;
    }

  public void setPrice(String price) {
        this.price = price;
    }

  public Fare fareBrand(String fareBrand) {
      this.fareBrand = fareBrand;
      return this;
  }

  /**
   * Name of the fare brand of this fare
   * @return fareBrand
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = false, value = "Name of the fare brand of this fare")

  public String getFareBrand() {
    return fareBrand;
}

  public void setFareBrand(String fareBrand) {
    this.fareBrand = fareBrand;
}

  public Fare fareBasis(String fareBasis) {
      this.fareBasis = fareBasis;
      return this;
  }

  /**
   * Code of the fare basis applied to this fare
   * @return fareBasis
   **/
  @ApiModelProperty(required = false, value = "Code of the fare basis applied to this fare")
  public String getFareBasis() {
     return fareBasis;
  }

  public void setFareBasis(String fareBasis) {
     this.fareBasis = fareBasis;
  }

  public Fare fareRules(List<FareRule> fareRules) {
      this.fareRules = fareRules;
      return this;
  }

  public Fare addFareRulesItem(FareRule fareRuleItem) {
      if (this.fareRules == null) {
          this.fareRules = new ArrayList<>();
      }
      this.fareRules.add(fareRuleItem);
      return this;
  }

  /**
   * The fare rules associated to the fare
   * @return fareRules
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fare rules associated to the fare")

  public List<FareRule> getFareRules() {
      return fareRules;
  }

  public void setFareRules(List<FareRule> fareRules) {
      this.fareRules = fareRules;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fare fare = (Fare) o;
      return Objects.equals(this.price, fare.price) &&
              Objects.equals(this.fareBrand, fare.fareBrand) &&
              Objects.equals(this.fareBasis, fare.fareBasis) &&
              Objects.equals(this.fareRules, fare.fareRules);
  }

  @Override
  public int hashCode() {
      return Objects.hash(price, fareBrand, fareBasis, fareRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fare {\n");

    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    fareBrand: ").append(toIndentedString(fareBrand)).append("\n");
    sb.append("    fareBasis: ").append(toIndentedString(fareBasis)).append("\n");
    sb.append("    fareRules: ").append(toIndentedString(fareRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("price");
    openapiFields.add("fare_brand");
    openapiFields.add("fare_basis");
    openapiFields.add("fare_rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Fare
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Fare.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Fare is not found in the empty JSON string", Fare.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Fare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Fare` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Fare.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonPrimitive() && !jsonObj.get("price").isJsonNull()) {
          throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if (jsonObj.get("fare_brand") != null && !jsonObj.get("fare_brand").isJsonPrimitive() && !jsonObj.get("fare_brand").isJsonNull()) {
          throw new IllegalArgumentException(String.format("Expected the field `fare_brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fare_brand").toString()));
      }
      if (jsonObj.get("fare_basis") != null && !jsonObj.get("fare_basis").isJsonPrimitive() && !jsonObj.get("fare_basis").isJsonNull()) {
          throw new IllegalArgumentException(String.format("Expected the field `fare_basis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fare_basis").toString()));
      }

      // validate the optional NonEmptyList `fare_rules`
      JsonArray jsonArrayfareRules = jsonObj.getAsJsonArray("fare_rules");
      if (jsonArrayfareRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fare_rules").isJsonArray()) {
              throw new IllegalArgumentException(String.format("Expected the field `fare_rules` to be an array in the JSON string but got `%s`", jsonObj.get("fare_rules").toString()));
          }

          // ensure the json data is a non empty array
          if (jsonArrayfareRules.isEmpty()) {
              throw new IllegalArgumentException(String.format("Expected the field `fare_rules` to be a non empty array in the JSON string"));
          }

          // validate the optional field `fareRules` (array)
          for (int i = 0; i < jsonArrayfareRules.size(); i++) {
              FareRule.validateJsonObject(jsonArrayfareRules.get(i).getAsJsonObject());
          };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Fare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Fare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Fare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Fare.class));

       return (TypeAdapter<T>) new TypeAdapter<Fare>() {
           @Override
           public void write(JsonWriter out, Fare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Fare read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Fare given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Fare
  * @throws IOException if the JSON string is invalid with respect to Fare
  */
  public static Fare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Fare.class);
  }

 /**
  * Convert an instance of Fare to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

