/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.Cabin;
import com.hopper.cloud.airlines.model.FlightStatus;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * An object detailing a segment of a fare slice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-02T18:35:20.974206513Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class DgExerciseItinerarySliceSegment {
  public static final String SERIALIZED_NAME_ORIGIN_AIRPORT = "origin_airport";
  @SerializedName(SERIALIZED_NAME_ORIGIN_AIRPORT)
  @javax.annotation.Nonnull
  private String originAirport;

  public static final String SERIALIZED_NAME_DESTINATION_AIRPORT = "destination_airport";
  @SerializedName(SERIALIZED_NAME_DESTINATION_AIRPORT)
  @javax.annotation.Nonnull
  private String destinationAirport;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE_TIME = "departure_date_time";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE_TIME)
  @javax.annotation.Nonnull
  private String departureDateTime;

  public static final String SERIALIZED_NAME_ARRIVAL_DATE_TIME = "arrival_date_time";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE_TIME)
  @javax.annotation.Nonnull
  private String arrivalDateTime;

  public static final String SERIALIZED_NAME_ESTIMATED_DEPARTURE_DATE_TIME = "estimated_departure_date_time";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_DEPARTURE_DATE_TIME)
  @javax.annotation.Nonnull
  private String estimatedDepartureDateTime;

  public static final String SERIALIZED_NAME_ESTIMATED_ARRIVAL_DATE_TIME = "estimated_arrival_date_time";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_ARRIVAL_DATE_TIME)
  @javax.annotation.Nonnull
  private String estimatedArrivalDateTime;

  public static final String SERIALIZED_NAME_FLIGHT_NUMBER = "flight_number";
  @SerializedName(SERIALIZED_NAME_FLIGHT_NUMBER)
  @javax.annotation.Nonnull
  private String flightNumber;

  public static final String SERIALIZED_NAME_VALIDATING_CARRIER_CODE = "validating_carrier_code";
  @SerializedName(SERIALIZED_NAME_VALIDATING_CARRIER_CODE)
  @javax.annotation.Nonnull
  private String validatingCarrierCode;

  public static final String SERIALIZED_NAME_CABIN = "cabin";
  @SerializedName(SERIALIZED_NAME_CABIN)
  @javax.annotation.Nonnull
  private Cabin cabin;

  public static final String SERIALIZED_NAME_FLIGHT_STATUS = "flight_status";
  @SerializedName(SERIALIZED_NAME_FLIGHT_STATUS)
  @javax.annotation.Nonnull
  private FlightStatus flightStatus;

  public static final String SERIALIZED_NAME_CHECKED_IN = "checked_in";
  @SerializedName(SERIALIZED_NAME_CHECKED_IN)
  @javax.annotation.Nullable
  private Boolean checkedIn;

  public static final String SERIALIZED_NAME_CHECKED_IN_BAGS = "checked_in_bags";
  @SerializedName(SERIALIZED_NAME_CHECKED_IN_BAGS)
  @javax.annotation.Nullable
  private Boolean checkedInBags;

  public static final String SERIALIZED_NAME_CHECKED_BAG_ALLOWANCE = "checked_bag_allowance";
  @SerializedName(SERIALIZED_NAME_CHECKED_BAG_ALLOWANCE)
  @javax.annotation.Nullable
  private Boolean checkedBagAllowance;

  public static final String SERIALIZED_NAME_BOARDED = "boarded";
  @SerializedName(SERIALIZED_NAME_BOARDED)
  @javax.annotation.Nullable
  private Boolean boarded;

  public static final String SERIALIZED_NAME_FLOWN = "flown";
  @SerializedName(SERIALIZED_NAME_FLOWN)
  @javax.annotation.Nullable
  private Boolean flown;

  public DgExerciseItinerarySliceSegment() {
  }

  public DgExerciseItinerarySliceSegment originAirport(@javax.annotation.Nonnull String originAirport) {
    this.originAirport = originAirport;
    return this;
  }

  /**
   * IATA airport code of origin
   * @return originAirport
   */
  @javax.annotation.Nonnull
  public String getOriginAirport() {
    return originAirport;
  }

  public void setOriginAirport(@javax.annotation.Nonnull String originAirport) {
    this.originAirport = originAirport;
  }


  public DgExerciseItinerarySliceSegment destinationAirport(@javax.annotation.Nonnull String destinationAirport) {
    this.destinationAirport = destinationAirport;
    return this;
  }

  /**
   * IATA airport code of destination
   * @return destinationAirport
   */
  @javax.annotation.Nonnull
  public String getDestinationAirport() {
    return destinationAirport;
  }

  public void setDestinationAirport(@javax.annotation.Nonnull String destinationAirport) {
    this.destinationAirport = destinationAirport;
  }


  public DgExerciseItinerarySliceSegment departureDateTime(@javax.annotation.Nonnull String departureDateTime) {
    this.departureDateTime = departureDateTime;
    return this;
  }

  /**
   * The local date and time of departure in ISO Local Date Time format
   * @return departureDateTime
   */
  @javax.annotation.Nonnull
  public String getDepartureDateTime() {
    return departureDateTime;
  }

  public void setDepartureDateTime(@javax.annotation.Nonnull String departureDateTime) {
    this.departureDateTime = departureDateTime;
  }


  public DgExerciseItinerarySliceSegment arrivalDateTime(@javax.annotation.Nonnull String arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
    return this;
  }

  /**
   * The local date and time of arrival in ISO Local Date Time format
   * @return arrivalDateTime
   */
  @javax.annotation.Nonnull
  public String getArrivalDateTime() {
    return arrivalDateTime;
  }

  public void setArrivalDateTime(@javax.annotation.Nonnull String arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
  }


  public DgExerciseItinerarySliceSegment estimatedDepartureDateTime(@javax.annotation.Nonnull String estimatedDepartureDateTime) {
    this.estimatedDepartureDateTime = estimatedDepartureDateTime;
    return this;
  }

  /**
   * The local date and time of estimated time of departure in ISO Local Date Time format
   * @return estimatedDepartureDateTime
   */
  @javax.annotation.Nonnull
  public String getEstimatedDepartureDateTime() {
    return estimatedDepartureDateTime;
  }

  public void setEstimatedDepartureDateTime(@javax.annotation.Nonnull String estimatedDepartureDateTime) {
    this.estimatedDepartureDateTime = estimatedDepartureDateTime;
  }


  public DgExerciseItinerarySliceSegment estimatedArrivalDateTime(@javax.annotation.Nonnull String estimatedArrivalDateTime) {
    this.estimatedArrivalDateTime = estimatedArrivalDateTime;
    return this;
  }

  /**
   * The local date and time of estimated time of arrival in ISO Local Date Time format
   * @return estimatedArrivalDateTime
   */
  @javax.annotation.Nonnull
  public String getEstimatedArrivalDateTime() {
    return estimatedArrivalDateTime;
  }

  public void setEstimatedArrivalDateTime(@javax.annotation.Nonnull String estimatedArrivalDateTime) {
    this.estimatedArrivalDateTime = estimatedArrivalDateTime;
  }


  public DgExerciseItinerarySliceSegment flightNumber(@javax.annotation.Nonnull String flightNumber) {
    this.flightNumber = flightNumber;
    return this;
  }

  /**
   * The number of the flight
   * @return flightNumber
   */
  @javax.annotation.Nonnull
  public String getFlightNumber() {
    return flightNumber;
  }

  public void setFlightNumber(@javax.annotation.Nonnull String flightNumber) {
    this.flightNumber = flightNumber;
  }


  public DgExerciseItinerarySliceSegment validatingCarrierCode(@javax.annotation.Nonnull String validatingCarrierCode) {
    this.validatingCarrierCode = validatingCarrierCode;
    return this;
  }

  /**
   * The IATA airline code of the validating carrier for this segment
   * @return validatingCarrierCode
   */
  @javax.annotation.Nonnull
  public String getValidatingCarrierCode() {
    return validatingCarrierCode;
  }

  public void setValidatingCarrierCode(@javax.annotation.Nonnull String validatingCarrierCode) {
    this.validatingCarrierCode = validatingCarrierCode;
  }


  public DgExerciseItinerarySliceSegment cabin(@javax.annotation.Nonnull Cabin cabin) {
    this.cabin = cabin;
    return this;
  }

  /**
   * Get cabin
   * @return cabin
   */
  @javax.annotation.Nonnull
  public Cabin getCabin() {
    return cabin;
  }

  public void setCabin(@javax.annotation.Nonnull Cabin cabin) {
    this.cabin = cabin;
  }


  public DgExerciseItinerarySliceSegment flightStatus(@javax.annotation.Nonnull FlightStatus flightStatus) {
    this.flightStatus = flightStatus;
    return this;
  }

  /**
   * Get flightStatus
   * @return flightStatus
   */
  @javax.annotation.Nonnull
  public FlightStatus getFlightStatus() {
    return flightStatus;
  }

  public void setFlightStatus(@javax.annotation.Nonnull FlightStatus flightStatus) {
    this.flightStatus = flightStatus;
  }


  public DgExerciseItinerarySliceSegment checkedIn(@javax.annotation.Nullable Boolean checkedIn) {
    this.checkedIn = checkedIn;
    return this;
  }

  /**
   * Is there at least one checked-in passenger on this flight
   * @return checkedIn
   */
  @javax.annotation.Nullable
  public Boolean getCheckedIn() {
    return checkedIn;
  }

  public void setCheckedIn(@javax.annotation.Nullable Boolean checkedIn) {
    this.checkedIn = checkedIn;
  }


  public DgExerciseItinerarySliceSegment checkedInBags(@javax.annotation.Nullable Boolean checkedInBags) {
    this.checkedInBags = checkedInBags;
    return this;
  }

  /**
   * Is there at least one checked-in bag on this flight
   * @return checkedInBags
   */
  @javax.annotation.Nullable
  public Boolean getCheckedInBags() {
    return checkedInBags;
  }

  public void setCheckedInBags(@javax.annotation.Nullable Boolean checkedInBags) {
    this.checkedInBags = checkedInBags;
  }


  public DgExerciseItinerarySliceSegment checkedBagAllowance(@javax.annotation.Nullable Boolean checkedBagAllowance) {
    this.checkedBagAllowance = checkedBagAllowance;
    return this;
  }

  /**
   * Is there a checked bag allowance on this flight
   * @return checkedBagAllowance
   */
  @javax.annotation.Nullable
  public Boolean getCheckedBagAllowance() {
    return checkedBagAllowance;
  }

  public void setCheckedBagAllowance(@javax.annotation.Nullable Boolean checkedBagAllowance) {
    this.checkedBagAllowance = checkedBagAllowance;
  }


  public DgExerciseItinerarySliceSegment boarded(@javax.annotation.Nullable Boolean boarded) {
    this.boarded = boarded;
    return this;
  }

  /**
   * Is there at least one passenger boarded on this flight
   * @return boarded
   */
  @javax.annotation.Nullable
  public Boolean getBoarded() {
    return boarded;
  }

  public void setBoarded(@javax.annotation.Nullable Boolean boarded) {
    this.boarded = boarded;
  }


  public DgExerciseItinerarySliceSegment flown(@javax.annotation.Nullable Boolean flown) {
    this.flown = flown;
    return this;
  }

  /**
   * Is this segment flown already
   * @return flown
   */
  @javax.annotation.Nullable
  public Boolean getFlown() {
    return flown;
  }

  public void setFlown(@javax.annotation.Nullable Boolean flown) {
    this.flown = flown;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DgExerciseItinerarySliceSegment dgExerciseItinerarySliceSegment = (DgExerciseItinerarySliceSegment) o;
    return Objects.equals(this.originAirport, dgExerciseItinerarySliceSegment.originAirport) &&
        Objects.equals(this.destinationAirport, dgExerciseItinerarySliceSegment.destinationAirport) &&
        Objects.equals(this.departureDateTime, dgExerciseItinerarySliceSegment.departureDateTime) &&
        Objects.equals(this.arrivalDateTime, dgExerciseItinerarySliceSegment.arrivalDateTime) &&
        Objects.equals(this.estimatedDepartureDateTime, dgExerciseItinerarySliceSegment.estimatedDepartureDateTime) &&
        Objects.equals(this.estimatedArrivalDateTime, dgExerciseItinerarySliceSegment.estimatedArrivalDateTime) &&
        Objects.equals(this.flightNumber, dgExerciseItinerarySliceSegment.flightNumber) &&
        Objects.equals(this.validatingCarrierCode, dgExerciseItinerarySliceSegment.validatingCarrierCode) &&
        Objects.equals(this.cabin, dgExerciseItinerarySliceSegment.cabin) &&
        Objects.equals(this.flightStatus, dgExerciseItinerarySliceSegment.flightStatus) &&
        Objects.equals(this.checkedIn, dgExerciseItinerarySliceSegment.checkedIn) &&
        Objects.equals(this.checkedInBags, dgExerciseItinerarySliceSegment.checkedInBags) &&
        Objects.equals(this.checkedBagAllowance, dgExerciseItinerarySliceSegment.checkedBagAllowance) &&
        Objects.equals(this.boarded, dgExerciseItinerarySliceSegment.boarded) &&
        Objects.equals(this.flown, dgExerciseItinerarySliceSegment.flown);
  }

  @Override
  public int hashCode() {
    return Objects.hash(originAirport, destinationAirport, departureDateTime, arrivalDateTime, estimatedDepartureDateTime, estimatedArrivalDateTime, flightNumber, validatingCarrierCode, cabin, flightStatus, checkedIn, checkedInBags, checkedBagAllowance, boarded, flown);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DgExerciseItinerarySliceSegment {\n");
    sb.append("    originAirport: ").append(toIndentedString(originAirport)).append("\n");
    sb.append("    destinationAirport: ").append(toIndentedString(destinationAirport)).append("\n");
    sb.append("    departureDateTime: ").append(toIndentedString(departureDateTime)).append("\n");
    sb.append("    arrivalDateTime: ").append(toIndentedString(arrivalDateTime)).append("\n");
    sb.append("    estimatedDepartureDateTime: ").append(toIndentedString(estimatedDepartureDateTime)).append("\n");
    sb.append("    estimatedArrivalDateTime: ").append(toIndentedString(estimatedArrivalDateTime)).append("\n");
    sb.append("    flightNumber: ").append(toIndentedString(flightNumber)).append("\n");
    sb.append("    validatingCarrierCode: ").append(toIndentedString(validatingCarrierCode)).append("\n");
    sb.append("    cabin: ").append(toIndentedString(cabin)).append("\n");
    sb.append("    flightStatus: ").append(toIndentedString(flightStatus)).append("\n");
    sb.append("    checkedIn: ").append(toIndentedString(checkedIn)).append("\n");
    sb.append("    checkedInBags: ").append(toIndentedString(checkedInBags)).append("\n");
    sb.append("    checkedBagAllowance: ").append(toIndentedString(checkedBagAllowance)).append("\n");
    sb.append("    boarded: ").append(toIndentedString(boarded)).append("\n");
    sb.append("    flown: ").append(toIndentedString(flown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("origin_airport");
    openapiFields.add("destination_airport");
    openapiFields.add("departure_date_time");
    openapiFields.add("arrival_date_time");
    openapiFields.add("estimated_departure_date_time");
    openapiFields.add("estimated_arrival_date_time");
    openapiFields.add("flight_number");
    openapiFields.add("validating_carrier_code");
    openapiFields.add("cabin");
    openapiFields.add("flight_status");
    openapiFields.add("checked_in");
    openapiFields.add("checked_in_bags");
    openapiFields.add("checked_bag_allowance");
    openapiFields.add("boarded");
    openapiFields.add("flown");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("origin_airport");
    openapiRequiredFields.add("destination_airport");
    openapiRequiredFields.add("departure_date_time");
    openapiRequiredFields.add("arrival_date_time");
    openapiRequiredFields.add("estimated_departure_date_time");
    openapiRequiredFields.add("estimated_arrival_date_time");
    openapiRequiredFields.add("flight_number");
    openapiRequiredFields.add("validating_carrier_code");
    openapiRequiredFields.add("cabin");
    openapiRequiredFields.add("flight_status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DgExerciseItinerarySliceSegment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DgExerciseItinerarySliceSegment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DgExerciseItinerarySliceSegment is not found in the empty JSON string", DgExerciseItinerarySliceSegment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DgExerciseItinerarySliceSegment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DgExerciseItinerarySliceSegment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DgExerciseItinerarySliceSegment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("origin_airport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin_airport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin_airport").toString()));
      }
      if (!jsonObj.get("destination_airport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_airport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_airport").toString()));
      }
      if (!jsonObj.get("departure_date_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departure_date_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departure_date_time").toString()));
      }
      if (!jsonObj.get("arrival_date_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arrival_date_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arrival_date_time").toString()));
      }
      if (!jsonObj.get("estimated_departure_date_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimated_departure_date_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimated_departure_date_time").toString()));
      }
      if (!jsonObj.get("estimated_arrival_date_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimated_arrival_date_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimated_arrival_date_time").toString()));
      }
      if (!jsonObj.get("flight_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flight_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flight_number").toString()));
      }
      if (!jsonObj.get("validating_carrier_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validating_carrier_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validating_carrier_code").toString()));
      }
      // validate the required field `cabin`
      Cabin.validateJsonElement(jsonObj.get("cabin"));
      // validate the required field `flight_status`
      FlightStatus.validateJsonElement(jsonObj.get("flight_status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DgExerciseItinerarySliceSegment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DgExerciseItinerarySliceSegment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DgExerciseItinerarySliceSegment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DgExerciseItinerarySliceSegment.class));

       return (TypeAdapter<T>) new TypeAdapter<DgExerciseItinerarySliceSegment>() {
           @Override
           public void write(JsonWriter out, DgExerciseItinerarySliceSegment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DgExerciseItinerarySliceSegment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DgExerciseItinerarySliceSegment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DgExerciseItinerarySliceSegment
   * @throws IOException if the JSON string is invalid with respect to DgExerciseItinerarySliceSegment
   */
  public static DgExerciseItinerarySliceSegment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DgExerciseItinerarySliceSegment.class);
  }

  /**
   * Convert an instance of DgExerciseItinerarySliceSegment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

