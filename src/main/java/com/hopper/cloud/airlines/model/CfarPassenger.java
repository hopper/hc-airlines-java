/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * An object detailing a passenger
 */
@ApiModel(description = "An object detailing a passenger")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CfarPassenger {
    public static final String SERIALIZED_NAME_PASSENGER_REFERENCE = "passenger_reference";
    @SerializedName(SERIALIZED_NAME_PASSENGER_REFERENCE)
    private String passengerReference;

    public static final String SERIALIZED_NAME_PASSENGER_TYPE = "passenger_type";
    @SerializedName(SERIALIZED_NAME_PASSENGER_TYPE)
    private PassengerType passengerType;

    public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
    @SerializedName(SERIALIZED_NAME_FIRST_NAME)
    private String firstName;

    public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
    @SerializedName(SERIALIZED_NAME_LAST_NAME)
    private String lastName;

    public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "date_of_birth";
    @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
    private String dateOfBirth;

    public static final String SERIALIZED_NAME_GENDER = "gender";
    @SerializedName(SERIALIZED_NAME_GENDER)
    private Gender gender;

    public CfarPassenger() {
    }

    public CfarPassenger passengerReference(String passengerReference) {
        this.passengerReference = passengerReference;
        return this;
    }

    @javax.annotation.Nonnull
    public String getPassengerReference() {
        return passengerReference;
    }

    public void setPassengerReference(String passengerReference) {
        this.passengerReference = passengerReference;
    }

    public CfarPassenger passengerType(PassengerType passengerType) {
        this.passengerType = passengerType;
        return this;
    }

    /**
     * Get passenger type
     * @return type
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public PassengerType getPassengerType() {
        return passengerType;
    }


    public void setPassengerType(PassengerType passengerType) {
        this.passengerType = passengerType;
    }

    public CfarPassenger firstName(String firstName) {

        this.firstName = firstName;
        return this;
    }

    /**
     * The first name of the passenger
     *
     * @return firstName
     **/
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public CfarPassenger lastName(String lastName) {

        this.lastName = lastName;
        return this;
    }

    /**
     * The last name of the passenger
     *
     * @return lastName
     **/
    public String getLastName() {
        return lastName;
    }


    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public CfarPassenger dateOfBirth(String dateOfBirth) {

        this.dateOfBirth = dateOfBirth;
        return this;
    }

    /**
     * The birth date in ISO Local Date format
     * @return dateOfBirth
     **/
    @ApiModelProperty(example = "2000-04-02", value = "The birth date in ISO Local Date format")
    public String getDateOfBirth() {
        return dateOfBirth;
    }


    public void setDateOfBirth(String dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public CfarPassenger gender(Gender gender) {
        this.gender = gender;
        return this;
    }

    /**
     * Get gender
     * @return type
     **/
    public Gender getGender() {
        return gender;
    }


    public void setGender(Gender gender) {
        this.gender = gender;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CfarPassenger cfarPassenger = (CfarPassenger) o;
        return Objects.equals(this.passengerReference, cfarPassenger.passengerReference) &&
                Objects.equals(this.passengerType, cfarPassenger.passengerType) &&
                Objects.equals(this.firstName, cfarPassenger.firstName) &&
                Objects.equals(this.lastName, cfarPassenger.lastName) &&
                Objects.equals(this.dateOfBirth, cfarPassenger.dateOfBirth) &&
                Objects.equals(this.gender, cfarPassenger.gender);
    }

    @Override
    public int hashCode() {
        return Objects.hash(passengerReference, passengerType, firstName, lastName, dateOfBirth, gender);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CfarPassenger {\n");
        sb.append("    passengerReference: ").append(toIndentedString(passengerReference)).append("\n");
        sb.append("    passengerType: ").append(toIndentedString(passengerType)).append("\n");
        sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
        sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
        sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
        sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("passenger_reference");
        openapiFields.add("passenger_type");
        openapiFields.add("first_name");
        openapiFields.add("last_name");
        openapiFields.add("date_of_birth");
        openapiFields.add("gender");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("passenger_reference");
        openapiRequiredFields.add("passenger_type");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to CfarPassenger
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (CfarPassenger.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in CfarPassenger is not found in the empty JSON string", CfarPassenger.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CfarPassenger.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CfarPassenger` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CfarPassenger.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("passenger_reference") != null && !jsonObj.get("passenger_reference").isJsonPrimitive() && !jsonObj.get("passenger_reference").isJsonNull()) {
            throw new IllegalArgumentException(String.format("Expected the field `passenger_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passenger_reference").toString()));
        }
        if (jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonPrimitive() && !jsonObj.get("first_name").isJsonNull()) {
            throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
        }
        if (jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonPrimitive() && !jsonObj.get("last_name").isJsonNull()) {
            throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
        }
        if (jsonObj.get("date_of_birth") != null && !jsonObj.get("date_of_birth").isJsonPrimitive() && !jsonObj.get("date_of_birth").isJsonNull()) {
            throw new IllegalArgumentException(String.format("Expected the field `date_of_birth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_of_birth").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CfarPassenger.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CfarPassenger' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CfarPassenger> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(CfarPassenger.class));

            return (TypeAdapter<T>) new TypeAdapter<CfarPassenger>() {
                @Override
                public void write(JsonWriter out, CfarPassenger value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CfarPassenger read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CfarPassenger given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CfarPassenger
     * @throws IOException if the JSON string is invalid with respect to CfarPassenger
     */
    public static CfarPassenger fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CfarPassenger.class);
    }

    /**
     * Convert an instance of CfarPassenger to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

