/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;

import com.hopper.cloud.airlines.JSON;

/**
 * An object detailing the Passenger Information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-02T18:35:20.974206513Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class CfarPassenger {
  public static final String SERIALIZED_NAME_PASSENGER_REFERENCE = "passenger_reference";
  @SerializedName(SERIALIZED_NAME_PASSENGER_REFERENCE)
  @javax.annotation.Nonnull
  private String passengerReference;

  public static final String SERIALIZED_NAME_PASSENGER_TYPE = "passenger_type";
  @SerializedName(SERIALIZED_NAME_PASSENGER_TYPE)
  @javax.annotation.Nonnull
  private PassengerType passengerType;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  @javax.annotation.Nullable
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  @javax.annotation.Nullable
  private String lastName;

  public CfarPassenger() {
  }

  public CfarPassenger passengerReference(@javax.annotation.Nonnull String passengerReference) {
    this.passengerReference = passengerReference;
    return this;
  }

  /**
   * Unique reference of the passenger
   * @return passengerReference
   */
  @javax.annotation.Nonnull
  public String getPassengerReference() {
    return passengerReference;
  }

  public void setPassengerReference(@javax.annotation.Nonnull String passengerReference) {
    this.passengerReference = passengerReference;
  }


  public CfarPassenger passengerType(@javax.annotation.Nonnull PassengerType passengerType) {
    this.passengerType = passengerType;
    return this;
  }

  /**
   * Get passengerType
   * @return passengerType
   */
  @javax.annotation.Nonnull
  public PassengerType getPassengerType() {
    return passengerType;
  }

  public void setPassengerType(@javax.annotation.Nonnull PassengerType passengerType) {
    this.passengerType = passengerType;
  }


  public CfarPassenger firstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name of the passenger
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
  }


  public CfarPassenger lastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Lastname of the passenger
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CfarPassenger cfarPassenger = (CfarPassenger) o;
    return Objects.equals(this.passengerReference, cfarPassenger.passengerReference) &&
        Objects.equals(this.passengerType, cfarPassenger.passengerType) &&
        Objects.equals(this.firstName, cfarPassenger.firstName) &&
        Objects.equals(this.lastName, cfarPassenger.lastName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passengerReference, passengerType, firstName, lastName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CfarPassenger {\n");
    sb.append("    passengerReference: ").append(toIndentedString(passengerReference)).append("\n");
    sb.append("    passengerType: ").append(toIndentedString(passengerType)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("passenger_reference");
    openapiFields.add("passenger_type");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CfarPassenger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CfarPassenger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CfarPassenger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CfarPassenger.class));

       return (TypeAdapter<T>) new TypeAdapter<CfarPassenger>() {
           @Override
           public void write(JsonWriter out, CfarPassenger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CfarPassenger read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CfarPassenger given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CfarPassenger
   * @throws IOException if the JSON string is invalid with respect to CfarPassenger
   */
  public static CfarPassenger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CfarPassenger.class);
  }

  /**
   * Convert an instance of CfarPassenger to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

