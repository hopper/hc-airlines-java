/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.Chrome;
import com.hopper.cloud.airlines.model.Edge;
import com.hopper.cloud.airlines.model.Firefox;
import com.hopper.cloud.airlines.model.InternetExplorer;
import com.hopper.cloud.airlines.model.Opera;
import com.hopper.cloud.airlines.model.OtherBrowser;
import com.hopper.cloud.airlines.model.Safari;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.hopper.cloud.airlines.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class Browser extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Browser.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Browser.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Browser' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Chrome> adapterChrome = gson.getDelegateAdapter(this, TypeToken.get(Chrome.class));
            final TypeAdapter<Edge> adapterEdge = gson.getDelegateAdapter(this, TypeToken.get(Edge.class));
            final TypeAdapter<Firefox> adapterFirefox = gson.getDelegateAdapter(this, TypeToken.get(Firefox.class));
            final TypeAdapter<InternetExplorer> adapterInternetExplorer = gson.getDelegateAdapter(this, TypeToken.get(InternetExplorer.class));
            final TypeAdapter<Opera> adapterOpera = gson.getDelegateAdapter(this, TypeToken.get(Opera.class));
            final TypeAdapter<OtherBrowser> adapterOtherBrowser = gson.getDelegateAdapter(this, TypeToken.get(OtherBrowser.class));
            final TypeAdapter<Safari> adapterSafari = gson.getDelegateAdapter(this, TypeToken.get(Safari.class));

            return (TypeAdapter<T>) new TypeAdapter<Browser>() {
                @Override
                public void write(JsonWriter out, Browser value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Chrome`
                    if (value.getActualInstance() instanceof Chrome) {
                        JsonElement element = adapterChrome.toJsonTree((Chrome)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Edge`
                    if (value.getActualInstance() instanceof Edge) {
                        JsonElement element = adapterEdge.toJsonTree((Edge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Firefox`
                    if (value.getActualInstance() instanceof Firefox) {
                        JsonElement element = adapterFirefox.toJsonTree((Firefox)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InternetExplorer`
                    if (value.getActualInstance() instanceof InternetExplorer) {
                        JsonElement element = adapterInternetExplorer.toJsonTree((InternetExplorer)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Opera`
                    if (value.getActualInstance() instanceof Opera) {
                        JsonElement element = adapterOpera.toJsonTree((Opera)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OtherBrowser`
                    if (value.getActualInstance() instanceof OtherBrowser) {
                        JsonElement element = adapterOtherBrowser.toJsonTree((OtherBrowser)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Safari`
                    if (value.getActualInstance() instanceof Safari) {
                        JsonElement element = adapterSafari.toJsonTree((Safari)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: Chrome, Edge, Firefox, InternetExplorer, Opera, OtherBrowser, Safari");
                }

                @Override
                public Browser read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Chrome
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Chrome.validateJsonElement(jsonElement);
                        actualAdapter = adapterChrome;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Chrome'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Chrome failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Chrome'", e);
                    }
                    // deserialize Edge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Edge.validateJsonElement(jsonElement);
                        actualAdapter = adapterEdge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Edge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Edge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Edge'", e);
                    }
                    // deserialize Firefox
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Firefox.validateJsonElement(jsonElement);
                        actualAdapter = adapterFirefox;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Firefox'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Firefox failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Firefox'", e);
                    }
                    // deserialize InternetExplorer
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InternetExplorer.validateJsonElement(jsonElement);
                        actualAdapter = adapterInternetExplorer;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InternetExplorer'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InternetExplorer failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InternetExplorer'", e);
                    }
                    // deserialize Opera
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Opera.validateJsonElement(jsonElement);
                        actualAdapter = adapterOpera;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Opera'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Opera failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Opera'", e);
                    }
                    // deserialize OtherBrowser
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OtherBrowser.validateJsonElement(jsonElement);
                        actualAdapter = adapterOtherBrowser;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OtherBrowser'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OtherBrowser failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OtherBrowser'", e);
                    }
                    // deserialize Safari
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Safari.validateJsonElement(jsonElement);
                        actualAdapter = adapterSafari;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Safari'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Safari failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Safari'", e);
                    }

                    if (match == 1) {
                        Browser ret = new Browser();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for Browser: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Browser() {
        super("oneOf", Boolean.FALSE);
    }

    public Browser(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Chrome", Chrome.class);
        schemas.put("Edge", Edge.class);
        schemas.put("Firefox", Firefox.class);
        schemas.put("InternetExplorer", InternetExplorer.class);
        schemas.put("Opera", Opera.class);
        schemas.put("OtherBrowser", OtherBrowser.class);
        schemas.put("Safari", Safari.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Browser.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Chrome, Edge, Firefox, InternetExplorer, Opera, OtherBrowser, Safari
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Chrome) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Edge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Firefox) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InternetExplorer) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Opera) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OtherBrowser) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Safari) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Chrome, Edge, Firefox, InternetExplorer, Opera, OtherBrowser, Safari");
    }

    /**
     * Get the actual instance, which can be the following:
     * Chrome, Edge, Firefox, InternetExplorer, Opera, OtherBrowser, Safari
     *
     * @return The actual instance (Chrome, Edge, Firefox, InternetExplorer, Opera, OtherBrowser, Safari)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Chrome`. If the actual instance is not `Chrome`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Chrome`
     * @throws ClassCastException if the instance is not `Chrome`
     */
    public Chrome getChrome() throws ClassCastException {
        return (Chrome)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Edge`. If the actual instance is not `Edge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Edge`
     * @throws ClassCastException if the instance is not `Edge`
     */
    public Edge getEdge() throws ClassCastException {
        return (Edge)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Firefox`. If the actual instance is not `Firefox`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Firefox`
     * @throws ClassCastException if the instance is not `Firefox`
     */
    public Firefox getFirefox() throws ClassCastException {
        return (Firefox)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InternetExplorer`. If the actual instance is not `InternetExplorer`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InternetExplorer`
     * @throws ClassCastException if the instance is not `InternetExplorer`
     */
    public InternetExplorer getInternetExplorer() throws ClassCastException {
        return (InternetExplorer)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Opera`. If the actual instance is not `Opera`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Opera`
     * @throws ClassCastException if the instance is not `Opera`
     */
    public Opera getOpera() throws ClassCastException {
        return (Opera)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OtherBrowser`. If the actual instance is not `OtherBrowser`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OtherBrowser`
     * @throws ClassCastException if the instance is not `OtherBrowser`
     */
    public OtherBrowser getOtherBrowser() throws ClassCastException {
        return (OtherBrowser)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Safari`. If the actual instance is not `Safari`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Safari`
     * @throws ClassCastException if the instance is not `Safari`
     */
    public Safari getSafari() throws ClassCastException {
        return (Safari)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Browser
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Chrome
        try {
            Chrome.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Chrome failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Edge
        try {
            Edge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Edge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Firefox
        try {
            Firefox.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Firefox failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InternetExplorer
        try {
            InternetExplorer.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InternetExplorer failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Opera
        try {
            Opera.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Opera failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OtherBrowser
        try {
            OtherBrowser.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OtherBrowser failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Safari
        try {
            Safari.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Safari failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for Browser with oneOf schemas: Chrome, Edge, Firefox, InternetExplorer, Opera, OtherBrowser, Safari. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of Browser given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Browser
     * @throws IOException if the JSON string is invalid with respect to Browser
     */
    public static Browser fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Browser.class);
    }

    /**
     * Convert an instance of Browser to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

