/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * An object containing information related to the airline&#39;s user. Should be included if known, but not if the user is anonymous.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-02T18:35:20.974206513Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class UserInfo {
  public static final String SERIALIZED_NAME_AIRLINE_USER_ID = "airline_user_id";
  @SerializedName(SERIALIZED_NAME_AIRLINE_USER_ID)
  @javax.annotation.Nonnull
  private String airlineUserId;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "created_date_time";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_PREVIOUS_BOOKINGS = "previous_bookings";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_BOOKINGS)
  @javax.annotation.Nullable
  private Integer previousBookings;

  public UserInfo() {
  }

  public UserInfo airlineUserId(@javax.annotation.Nonnull String airlineUserId) {
    this.airlineUserId = airlineUserId;
    return this;
  }

  /**
   * The airline&#39;s unique identifier for a user; can be an arbitrary string
   * @return airlineUserId
   */
  @javax.annotation.Nonnull
  public String getAirlineUserId() {
    return airlineUserId;
  }

  public void setAirlineUserId(@javax.annotation.Nonnull String airlineUserId) {
    this.airlineUserId = airlineUserId;
  }


  public UserInfo createdDateTime(@javax.annotation.Nullable OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
    return this;
  }

  /**
   * A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a user&#39;s account was created
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }

  public void setCreatedDateTime(@javax.annotation.Nullable OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
  }


  public UserInfo previousBookings(@javax.annotation.Nullable Integer previousBookings) {
    this.previousBookings = previousBookings;
    return this;
  }

  /**
   * Number of prior bookings a user has made
   * minimum: 0
   * @return previousBookings
   */
  @javax.annotation.Nullable
  public Integer getPreviousBookings() {
    return previousBookings;
  }

  public void setPreviousBookings(@javax.annotation.Nullable Integer previousBookings) {
    this.previousBookings = previousBookings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserInfo userInfo = (UserInfo) o;
    return Objects.equals(this.airlineUserId, userInfo.airlineUserId) &&
        Objects.equals(this.createdDateTime, userInfo.createdDateTime) &&
        Objects.equals(this.previousBookings, userInfo.previousBookings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airlineUserId, createdDateTime, previousBookings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserInfo {\n");
    sb.append("    airlineUserId: ").append(toIndentedString(airlineUserId)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    previousBookings: ").append(toIndentedString(previousBookings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("airline_user_id");
    openapiFields.add("created_date_time");
    openapiFields.add("previous_bookings");
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<UserInfo>() {
           @Override
           public void write(JsonWriter out, UserInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserInfo
   * @throws IOException if the JSON string is invalid with respect to UserInfo
   */
  public static UserInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserInfo.class);
  }

  /**
   * Convert an instance of UserInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

