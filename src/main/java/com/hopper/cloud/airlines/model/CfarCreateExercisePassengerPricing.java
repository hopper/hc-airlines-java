/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hopper.cloud.airlines.model.CfarPassengerTax;
import com.hopper.cloud.airlines.model.PassengerCount;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hopper.cloud.airlines.JSON;

/**
 * CfarCreateExercisePassengerPricing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-02T17:40:08.115903591Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class CfarCreateExercisePassengerPricing {
  public static final String SERIALIZED_NAME_PASSENGER_COUNT = "passenger_count";
  @SerializedName(SERIALIZED_NAME_PASSENGER_COUNT)
  @javax.annotation.Nonnull
  private PassengerCount passengerCount;

  public static final String SERIALIZED_NAME_INDIVIDUAL_PRICE = "individual_price";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_PRICE)
  @javax.annotation.Nullable
  private String individualPrice;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  @javax.annotation.Nullable
  private List<CfarPassengerTax> taxes = new ArrayList<>();

  public CfarCreateExercisePassengerPricing() {
  }

  public CfarCreateExercisePassengerPricing passengerCount(@javax.annotation.Nonnull PassengerCount passengerCount) {
    this.passengerCount = passengerCount;
    return this;
  }

  /**
   * Get passengerCount
   * @return passengerCount
   */
  @javax.annotation.Nonnull
  public PassengerCount getPassengerCount() {
    return passengerCount;
  }

  public void setPassengerCount(@javax.annotation.Nonnull PassengerCount passengerCount) {
    this.passengerCount = passengerCount;
  }


  public CfarCreateExercisePassengerPricing individualPrice(@javax.annotation.Nullable String individualPrice) {
    this.individualPrice = individualPrice;
    return this;
  }

  /**
   * Price per passenger (excluding ancillaries)
   * @return individualPrice
   */
  @javax.annotation.Nullable
  public String getIndividualPrice() {
    return individualPrice;
  }

  public void setIndividualPrice(@javax.annotation.Nullable String individualPrice) {
    this.individualPrice = individualPrice;
  }


  public CfarCreateExercisePassengerPricing taxes(@javax.annotation.Nullable List<CfarPassengerTax> taxes) {
    this.taxes = taxes;
    return this;
  }

  public CfarCreateExercisePassengerPricing addTaxesItem(CfarPassengerTax taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

  /**
   * Taxes applicable per passenger
   * @return taxes
   */
  @javax.annotation.Nullable
  public List<CfarPassengerTax> getTaxes() {
    return taxes;
  }

  public void setTaxes(@javax.annotation.Nullable List<CfarPassengerTax> taxes) {
    this.taxes = taxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CfarCreateExercisePassengerPricing cfarCreateExercisePassengerPricing = (CfarCreateExercisePassengerPricing) o;
    return Objects.equals(this.passengerCount, cfarCreateExercisePassengerPricing.passengerCount) &&
        Objects.equals(this.individualPrice, cfarCreateExercisePassengerPricing.individualPrice) &&
        Objects.equals(this.taxes, cfarCreateExercisePassengerPricing.taxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passengerCount, individualPrice, taxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CfarCreateExercisePassengerPricing {\n");
    sb.append("    passengerCount: ").append(toIndentedString(passengerCount)).append("\n");
    sb.append("    individualPrice: ").append(toIndentedString(individualPrice)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("passenger_count");
    openapiFields.add("individual_price");
    openapiFields.add("taxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("passenger_count");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CfarCreateExercisePassengerPricing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CfarCreateExercisePassengerPricing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CfarCreateExercisePassengerPricing is not found in the empty JSON string", CfarCreateExercisePassengerPricing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CfarCreateExercisePassengerPricing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CfarCreateExercisePassengerPricing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CfarCreateExercisePassengerPricing.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `passenger_count`
      PassengerCount.validateJsonElement(jsonObj.get("passenger_count"));
      if ((jsonObj.get("individual_price") != null && !jsonObj.get("individual_price").isJsonNull()) && !jsonObj.get("individual_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individual_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individual_price").toString()));
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            CfarPassengerTax.validateJsonElement(jsonArraytaxes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CfarCreateExercisePassengerPricing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CfarCreateExercisePassengerPricing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CfarCreateExercisePassengerPricing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CfarCreateExercisePassengerPricing.class));

       return (TypeAdapter<T>) new TypeAdapter<CfarCreateExercisePassengerPricing>() {
           @Override
           public void write(JsonWriter out, CfarCreateExercisePassengerPricing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CfarCreateExercisePassengerPricing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CfarCreateExercisePassengerPricing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CfarCreateExercisePassengerPricing
   * @throws IOException if the JSON string is invalid with respect to CfarCreateExercisePassengerPricing
   */
  public static CfarCreateExercisePassengerPricing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CfarCreateExercisePassengerPricing.class);
  }

  /**
   * Convert an instance of CfarCreateExercisePassengerPricing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

