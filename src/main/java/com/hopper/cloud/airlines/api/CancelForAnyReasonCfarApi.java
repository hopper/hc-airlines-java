/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.api;

import com.hopper.cloud.airlines.ApiCallback;
import com.hopper.cloud.airlines.ApiClient;
import com.hopper.cloud.airlines.ApiException;
import com.hopper.cloud.airlines.ApiResponse;
import com.hopper.cloud.airlines.Configuration;
import com.hopper.cloud.airlines.Pair;
import com.hopper.cloud.airlines.ProgressRequestBody;
import com.hopper.cloud.airlines.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hopper.cloud.airlines.model.BadRequest;
import com.hopper.cloud.airlines.model.CfarContract;
import com.hopper.cloud.airlines.model.CfarContractExercise;
import com.hopper.cloud.airlines.model.CfarOffer;
import com.hopper.cloud.airlines.model.CfarPayment;
import com.hopper.cloud.airlines.model.CreateCfarContractExerciseRequest;
import com.hopper.cloud.airlines.model.CreateCfarContractRequest;
import com.hopper.cloud.airlines.model.CreateCfarOfferRequest;
import com.hopper.cloud.airlines.model.MarkCfarContractExerciseCompleteRequest;
import com.hopper.cloud.airlines.model.ProcessCfarPaymentRequest;
import com.hopper.cloud.airlines.model.UnprocessableEntity;
import com.hopper.cloud.airlines.model.UpdateCfarContractRequest;
import com.hopper.cloud.airlines.model.UpdateCfarFormOfPaymentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CancelForAnyReasonCfarApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CancelForAnyReasonCfarApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CancelForAnyReasonCfarApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCfarContractsId
     * @param id A unique identifier for a contract (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCfarContractsIdCall(String id, String hcSessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cfar_contracts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (hcSessionID != null) {
            localVarHeaderParams.put("HC-Session-ID", localVarApiClient.parameterToString(hcSessionID));
        }


        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCfarContractsIdValidateBeforeCall(String id, String hcSessionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCfarContractsId(Async)");
        }

        return getCfarContractsIdCall(id, hcSessionID, _callback);

    }

    /**
     * Get a CFAR Contract
     * Get a CFAR contract
     * @param id A unique identifier for a contract (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return CfarContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public CfarContract getCfarContractsId(String id, String hcSessionID) throws ApiException {
        ApiResponse<CfarContract> localVarResp = getCfarContractsIdWithHttpInfo(id, hcSessionID);
        return localVarResp.getData();
    }

    /**
     * Get a CFAR Contract
     * Get a CFAR contract
     * @param id A unique identifier for a contract (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return ApiResponse&lt;CfarContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CfarContract> getCfarContractsIdWithHttpInfo(String id, String hcSessionID) throws ApiException {
        okhttp3.Call localVarCall = getCfarContractsIdValidateBeforeCall(id, hcSessionID, null);
        Type localVarReturnType = new TypeToken<CfarContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a CFAR Contract (asynchronously)
     * Get a CFAR contract
     * @param id A unique identifier for a contract (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCfarContractsIdAsync(String id, String hcSessionID, final ApiCallback<CfarContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCfarContractsIdValidateBeforeCall(id, hcSessionID, _callback);
        Type localVarReturnType = new TypeToken<CfarContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCfarContractExercises
     * @param createCfarContractExerciseRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCfarContractExercisesCall(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCfarContractExerciseRequest;

        // create path and map variables
        String localVarPath = "/cfar_contract_exercises";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (hcSessionID != null) {
            localVarHeaderParams.put("HC-Session-ID", localVarApiClient.parameterToString(hcSessionID));
        }


        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCfarContractExercisesValidateBeforeCall(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCfarContractExerciseRequest' is set
        if (createCfarContractExerciseRequest == null) {
            throw new ApiException("Missing the required parameter 'createCfarContractExerciseRequest' when calling postCfarContractExercises(Async)");
        }

        return postCfarContractExercisesCall(createCfarContractExerciseRequest, hcSessionID, _callback);

    }

    /**
     * Create CFAR Exercise
     * Record that a request to exercise a CFAR contract has occurred.
     * @param createCfarContractExerciseRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return CfarContractExercise
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public CfarContractExercise postCfarContractExercises(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, String hcSessionID) throws ApiException {
        ApiResponse<CfarContractExercise> localVarResp = postCfarContractExercisesWithHttpInfo(createCfarContractExerciseRequest, hcSessionID);
        return localVarResp.getData();
    }

    /**
     * Create CFAR Exercise
     * Record that a request to exercise a CFAR contract has occurred.
     * @param createCfarContractExerciseRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return ApiResponse&lt;CfarContractExercise&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CfarContractExercise> postCfarContractExercisesWithHttpInfo(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, String hcSessionID) throws ApiException {
        okhttp3.Call localVarCall = postCfarContractExercisesValidateBeforeCall(createCfarContractExerciseRequest, hcSessionID, null);
        Type localVarReturnType = new TypeToken<CfarContractExercise>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create CFAR Exercise (asynchronously)
     * Record that a request to exercise a CFAR contract has occurred.
     * @param createCfarContractExerciseRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCfarContractExercisesAsync(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, String hcSessionID, final ApiCallback<CfarContractExercise> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCfarContractExercisesValidateBeforeCall(createCfarContractExerciseRequest, hcSessionID, _callback);
        Type localVarReturnType = new TypeToken<CfarContractExercise>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCfarContracts
     * @param createCfarContractRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The CFAR contract creation request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCfarContractsCall(CreateCfarContractRequest createCfarContractRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCfarContractRequest;

        // create path and map variables
        String localVarPath = "/cfar_contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCfarContractsValidateBeforeCall(CreateCfarContractRequest createCfarContractRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCfarContractRequest' is set
        if (createCfarContractRequest == null) {
            throw new ApiException("Missing the required parameter 'createCfarContractRequest' when calling postCfarContracts(Async)");
        }

        return postCfarContractsCall(createCfarContractRequest, _callback);

    }

    /**
     * Create a CFAR Contract
     * Create a CFAR contract from selected CFAR offer(s).
     * @param createCfarContractRequest  (required)
     * @return CfarContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The CFAR contract creation request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public CfarContract postCfarContracts(CreateCfarContractRequest createCfarContractRequest) throws ApiException {
        ApiResponse<CfarContract> localVarResp = postCfarContractsWithHttpInfo(createCfarContractRequest);
        return localVarResp.getData();
    }

    /**
     * Create a CFAR Contract
     * Create a CFAR contract from selected CFAR offer(s).
     * @param createCfarContractRequest  (required)
     * @return ApiResponse&lt;CfarContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The CFAR contract creation request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CfarContract> postCfarContractsWithHttpInfo(CreateCfarContractRequest createCfarContractRequest) throws ApiException {
        okhttp3.Call localVarCall = postCfarContractsValidateBeforeCall(createCfarContractRequest, null);
        Type localVarReturnType = new TypeToken<CfarContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a CFAR Contract (asynchronously)
     * Create a CFAR contract from selected CFAR offer(s).
     * @param createCfarContractRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The CFAR contract creation request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCfarContractsAsync(CreateCfarContractRequest createCfarContractRequest, final ApiCallback<CfarContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCfarContractsValidateBeforeCall(createCfarContractRequest, _callback);
        Type localVarReturnType = new TypeToken<CfarContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCfarContractsIdPayment
     * @param id A unique identifier for a contract (required)
     * @param processCfarPaymentRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the transaction </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCfarContractsIdPaymentCall(String id, ProcessCfarPaymentRequest processCfarPaymentRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processCfarPaymentRequest;

        // create path and map variables
        String localVarPath = "/cfar_contracts/{id}/payment"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (hcSessionID != null) {
            localVarHeaderParams.put("HC-Session-ID", localVarApiClient.parameterToString(hcSessionID));
        }


        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCfarContractsIdPaymentValidateBeforeCall(String id, ProcessCfarPaymentRequest processCfarPaymentRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postCfarContractsIdPayment(Async)");
        }

        // verify the required parameter 'processCfarPaymentRequest' is set
        if (processCfarPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'processCfarPaymentRequest' when calling postCfarContractsIdPayment(Async)");
        }

        return postCfarContractsIdPaymentCall(id, processCfarPaymentRequest, hcSessionID, _callback);

    }

    /**
     * Process CFAR Payment
     * When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl --request POST --url https://core.spreedly.com/v1/payment_methods.json --header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; --data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
     * @param id A unique identifier for a contract (required)
     * @param processCfarPaymentRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return CfarPayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the transaction </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public CfarPayment postCfarContractsIdPayment(String id, ProcessCfarPaymentRequest processCfarPaymentRequest, String hcSessionID) throws ApiException {
        ApiResponse<CfarPayment> localVarResp = postCfarContractsIdPaymentWithHttpInfo(id, processCfarPaymentRequest, hcSessionID);
        return localVarResp.getData();
    }

    /**
     * Process CFAR Payment
     * When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl --request POST --url https://core.spreedly.com/v1/payment_methods.json --header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; --data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
     * @param id A unique identifier for a contract (required)
     * @param processCfarPaymentRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return ApiResponse&lt;CfarPayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the transaction </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CfarPayment> postCfarContractsIdPaymentWithHttpInfo(String id, ProcessCfarPaymentRequest processCfarPaymentRequest, String hcSessionID) throws ApiException {
        okhttp3.Call localVarCall = postCfarContractsIdPaymentValidateBeforeCall(id, processCfarPaymentRequest, hcSessionID, null);
        Type localVarReturnType = new TypeToken<CfarPayment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Process CFAR Payment (asynchronously)
     * When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl --request POST --url https://core.spreedly.com/v1/payment_methods.json --header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; --data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
     * @param id A unique identifier for a contract (required)
     * @param processCfarPaymentRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the transaction </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCfarContractsIdPaymentAsync(String id, ProcessCfarPaymentRequest processCfarPaymentRequest, String hcSessionID, final ApiCallback<CfarPayment> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCfarContractsIdPaymentValidateBeforeCall(id, processCfarPaymentRequest, hcSessionID, _callback);
        Type localVarReturnType = new TypeToken<CfarPayment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCfarOffers
     * @param createCfarOfferRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR offers </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCfarOffersCall(CreateCfarOfferRequest createCfarOfferRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCfarOfferRequest;

        // create path and map variables
        String localVarPath = "/cfar_offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (hcSessionID != null) {
            localVarHeaderParams.put("HC-Session-ID", localVarApiClient.parameterToString(hcSessionID));
        }


        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCfarOffersValidateBeforeCall(CreateCfarOfferRequest createCfarOfferRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCfarOfferRequest' is set
        if (createCfarOfferRequest == null) {
            throw new ApiException("Missing the required parameter 'createCfarOfferRequest' when calling postCfarOffers(Async)");
        }

        return postCfarOffersCall(createCfarOfferRequest, hcSessionID, _callback);

    }

    /**
     * Create CFAR Offers
     * Create CFAR offers for a user&#39;s trip
     * @param createCfarOfferRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return List&lt;CfarOffer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR offers </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public List<CfarOffer> postCfarOffers(CreateCfarOfferRequest createCfarOfferRequest, String hcSessionID) throws ApiException {
        ApiResponse<List<CfarOffer>> localVarResp = postCfarOffersWithHttpInfo(createCfarOfferRequest, hcSessionID);
        return localVarResp.getData();
    }

    /**
     * Create CFAR Offers
     * Create CFAR offers for a user&#39;s trip
     * @param createCfarOfferRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return ApiResponse&lt;List&lt;CfarOffer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR offers </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CfarOffer>> postCfarOffersWithHttpInfo(CreateCfarOfferRequest createCfarOfferRequest, String hcSessionID) throws ApiException {
        okhttp3.Call localVarCall = postCfarOffersValidateBeforeCall(createCfarOfferRequest, hcSessionID, null);
        Type localVarReturnType = new TypeToken<List<CfarOffer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create CFAR Offers (asynchronously)
     * Create CFAR offers for a user&#39;s trip
     * @param createCfarOfferRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created CFAR offers </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCfarOffersAsync(CreateCfarOfferRequest createCfarOfferRequest, String hcSessionID, final ApiCallback<List<CfarOffer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCfarOffersValidateBeforeCall(createCfarOfferRequest, hcSessionID, _callback);
        Type localVarReturnType = new TypeToken<List<CfarOffer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putCfarContractExercisesIdMarkCompleted
     * @param id A unique identifier for a exercise (required)
     * @param markCfarContractExerciseCompleteRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCfarContractExercisesIdMarkCompletedCall(String id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = markCfarContractExerciseCompleteRequest;

        // create path and map variables
        String localVarPath = "/cfar_contract_exercises/{id}/mark_completed"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (hcSessionID != null) {
            localVarHeaderParams.put("HC-Session-ID", localVarApiClient.parameterToString(hcSessionID));
        }


        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCfarContractExercisesIdMarkCompletedValidateBeforeCall(String id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putCfarContractExercisesIdMarkCompleted(Async)");
        }

        // verify the required parameter 'markCfarContractExerciseCompleteRequest' is set
        if (markCfarContractExerciseCompleteRequest == null) {
            throw new ApiException("Missing the required parameter 'markCfarContractExerciseCompleteRequest' when calling putCfarContractExercisesIdMarkCompleted(Async)");
        }

        return putCfarContractExercisesIdMarkCompletedCall(id, markCfarContractExerciseCompleteRequest, hcSessionID, _callback);

    }

    /**
     * Complete CFAR Exercise
     * Record that a request to exercise a CFAR contract has been completed
     * @param id A unique identifier for a exercise (required)
     * @param markCfarContractExerciseCompleteRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return CfarContractExercise
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public CfarContractExercise putCfarContractExercisesIdMarkCompleted(String id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, String hcSessionID) throws ApiException {
        ApiResponse<CfarContractExercise> localVarResp = putCfarContractExercisesIdMarkCompletedWithHttpInfo(id, markCfarContractExerciseCompleteRequest, hcSessionID);
        return localVarResp.getData();
    }

    /**
     * Complete CFAR Exercise
     * Record that a request to exercise a CFAR contract has been completed
     * @param id A unique identifier for a exercise (required)
     * @param markCfarContractExerciseCompleteRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return ApiResponse&lt;CfarContractExercise&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CfarContractExercise> putCfarContractExercisesIdMarkCompletedWithHttpInfo(String id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, String hcSessionID) throws ApiException {
        okhttp3.Call localVarCall = putCfarContractExercisesIdMarkCompletedValidateBeforeCall(id, markCfarContractExerciseCompleteRequest, hcSessionID, null);
        Type localVarReturnType = new TypeToken<CfarContractExercise>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete CFAR Exercise (asynchronously)
     * Record that a request to exercise a CFAR contract has been completed
     * @param id A unique identifier for a exercise (required)
     * @param markCfarContractExerciseCompleteRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCfarContractExercisesIdMarkCompletedAsync(String id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, String hcSessionID, final ApiCallback<CfarContractExercise> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCfarContractExercisesIdMarkCompletedValidateBeforeCall(id, markCfarContractExerciseCompleteRequest, hcSessionID, _callback);
        Type localVarReturnType = new TypeToken<CfarContractExercise>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putCfarContractsIdFormsOfPayment
     * @param id A unique identifier for a contract (required)
     * @param updateCfarFormOfPaymentRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> Forms of payment update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCfarContractsIdFormsOfPaymentCall(String id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCfarFormOfPaymentRequest;

        // create path and map variables
        String localVarPath = "/cfar_contracts/{id}/forms_of_payment"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (hcSessionID != null) {
            localVarHeaderParams.put("HC-Session-ID", localVarApiClient.parameterToString(hcSessionID));
        }


        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCfarContractsIdFormsOfPaymentValidateBeforeCall(String id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        return putCfarContractsIdFormsOfPaymentCall(id, updateCfarFormOfPaymentRequest, hcSessionID, _callback);
    }

    /**
     * Update forms of payment of a CFAR Contract
     * Update forms of payment linked with a CFAR contract
     * @param id A unique identifier for a contract (required)
     * @param updateCfarFormOfPaymentRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return CfarContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> Forms of payment update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public CfarContract putCfarContractsIdFormsOfPayment(String id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, String hcSessionID) throws ApiException {
        ApiResponse<CfarContract> localVarResp = putCfarContractsIdFormsOfPaymentWithHttpInfo(id, updateCfarFormOfPaymentRequest, hcSessionID);
        return localVarResp.getData();
    }

    /**
     * Update forms of payment of a CFAR Contract
     * Update forms of payment linked with a CFAR contract
     * @param id A unique identifier for a contract (required)
     * @param updateCfarFormOfPaymentRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return ApiResponse&lt;CfarContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> Forms of payment update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CfarContract> putCfarContractsIdFormsOfPaymentWithHttpInfo(String id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, String hcSessionID) throws ApiException {
        okhttp3.Call localVarCall = putCfarContractsIdFormsOfPaymentValidateBeforeCall(id, updateCfarFormOfPaymentRequest, hcSessionID, null);
        Type localVarReturnType = new TypeToken<CfarContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update forms of payment of a CFAR Contract (asynchronously)
     * Update forms of payment linked with a CFAR contract
     * @param id A unique identifier for a contract (required)
     * @param updateCfarFormOfPaymentRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> Forms of payment update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCfarContractsIdFormsOfPaymentAsync(String id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, String hcSessionID, final ApiCallback<CfarContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCfarContractsIdFormsOfPaymentValidateBeforeCall(id, updateCfarFormOfPaymentRequest, hcSessionID, _callback);
        Type localVarReturnType = new TypeToken<CfarContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putCfarContractsIdUpdateStatus
     * @param id A unique identifier for a contract (required)
     * @param updateCfarContractRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The CFAR contract status update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCfarContractsIdUpdateStatusCall(String id, UpdateCfarContractRequest updateCfarContractRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCfarContractRequest;

        // create path and map variables
        String localVarPath = "/cfar_contracts/{id}/update_status"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (hcSessionID != null) {
            localVarHeaderParams.put("HC-Session-ID", localVarApiClient.parameterToString(hcSessionID));
        }


        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCfarContractsIdUpdateStatusValidateBeforeCall(String id, UpdateCfarContractRequest updateCfarContractRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putCfarContractsIdUpdateStatus(Async)");
        }

        // verify the required parameter 'updateCfarContractRequest' is set
        if (updateCfarContractRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCfarContractRequest' when calling putCfarContractsIdUpdateStatus(Async)");
        }

        return putCfarContractsIdUpdateStatusCall(id, updateCfarContractRequest, hcSessionID, _callback);

    }

    /**
     * Update CFAR Contract Status
     * Update the CFAR contract
     * @param id A unique identifier for a contract (required)
     * @param updateCfarContractRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return CfarContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The CFAR contract status update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public CfarContract putCfarContractsIdUpdateStatus(String id, UpdateCfarContractRequest updateCfarContractRequest, String hcSessionID) throws ApiException {
        ApiResponse<CfarContract> localVarResp = putCfarContractsIdUpdateStatusWithHttpInfo(id, updateCfarContractRequest, hcSessionID);
        return localVarResp.getData();
    }

    /**
     * Update CFAR Contract Status
     * Update the CFAR contract
     * @param id A unique identifier for a contract (required)
     * @param updateCfarContractRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return ApiResponse&lt;CfarContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The CFAR contract status update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CfarContract> putCfarContractsIdUpdateStatusWithHttpInfo(String id, UpdateCfarContractRequest updateCfarContractRequest, String hcSessionID) throws ApiException {
        okhttp3.Call localVarCall = putCfarContractsIdUpdateStatusValidateBeforeCall(id, updateCfarContractRequest, hcSessionID, null);
        Type localVarReturnType = new TypeToken<CfarContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update CFAR Contract Status (asynchronously)
     * Update the CFAR contract
     * @param id A unique identifier for a contract (required)
     * @param updateCfarContractRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated CFAR contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The CFAR contract status update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCfarContractsIdUpdateStatusAsync(String id, UpdateCfarContractRequest updateCfarContractRequest, String hcSessionID, final ApiCallback<CfarContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCfarContractsIdUpdateStatusValidateBeforeCall(id, updateCfarContractRequest, hcSessionID, _callback);
        Type localVarReturnType = new TypeToken<CfarContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
