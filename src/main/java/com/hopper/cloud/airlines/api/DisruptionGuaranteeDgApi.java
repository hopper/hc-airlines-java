/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines.api;

import com.hopper.cloud.airlines.ApiCallback;
import com.hopper.cloud.airlines.ApiClient;
import com.hopper.cloud.airlines.ApiException;
import com.hopper.cloud.airlines.ApiResponse;
import com.hopper.cloud.airlines.Configuration;
import com.hopper.cloud.airlines.Pair;
import com.hopper.cloud.airlines.ProgressRequestBody;
import com.hopper.cloud.airlines.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hopper.cloud.airlines.model.BadRequest;
import com.hopper.cloud.airlines.model.CreateDgContractExerciseRequest;
import com.hopper.cloud.airlines.model.CreateDgContractExerciseResponse;
import com.hopper.cloud.airlines.model.CreateDgContractRequest;
import com.hopper.cloud.airlines.model.CreateDgOfferItemResponse;
import com.hopper.cloud.airlines.model.CreateDgOffersRequest;
import com.hopper.cloud.airlines.model.DgContract;
import com.hopper.cloud.airlines.model.DgEvent;
import com.hopper.cloud.airlines.model.DgItinerarySlice;
import com.hopper.cloud.airlines.model.DgPayment;
import com.hopper.cloud.airlines.model.ProcessDgPaymentRequest;
import com.hopper.cloud.airlines.model.UnprocessableEntity;
import com.hopper.cloud.airlines.model.UpdateDgContractStatusRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DisruptionGuaranteeDgApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DisruptionGuaranteeDgApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DisruptionGuaranteeDgApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDgContractsId
     * @param id A unique identifier for a contract (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDgContractsIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dg_contracts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDgContractsIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDgContractsId(Async)");
        }

        return getDgContractsIdCall(id, _callback);

    }

    /**
     * Get a DG contract
     * Get a DG contract
     * @param id A unique identifier for a contract (required)
     * @return DgContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public DgContract getDgContractsId(String id) throws ApiException {
        ApiResponse<DgContract> localVarResp = getDgContractsIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a DG contract
     * Get a DG contract
     * @param id A unique identifier for a contract (required)
     * @return ApiResponse&lt;DgContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DgContract> getDgContractsIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getDgContractsIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DgContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a DG contract (asynchronously)
     * Get a DG contract
     * @param id A unique identifier for a contract (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDgContractsIdAsync(String id, final ApiCallback<DgContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDgContractsIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DgContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCustomerDgEvents
     * @param dgEvent  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The event has been successfully created </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCustomerDgEventsCall(DgEvent dgEvent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dgEvent;

        // create path and map variables
        String localVarPath = "/customer/dg/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCustomerDgEventsValidateBeforeCall(DgEvent dgEvent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dgEvent' is set
        if (dgEvent == null) {
            throw new ApiException("Missing the required parameter 'dgEvent' when calling postCustomerDgEvents(Async)");
        }

        return postCustomerDgEventsCall(dgEvent, _callback);

    }

    /**
     * Create an Event
     * Create a new event for analytics
     * @param dgEvent  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The event has been successfully created </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public void postCustomerDgEvents(DgEvent dgEvent) throws ApiException {
        postCustomerDgEventsWithHttpInfo(dgEvent);
    }

    /**
     * Create an Event
     * Create a new event for analytics
     * @param dgEvent  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The event has been successfully created </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postCustomerDgEventsWithHttpInfo(DgEvent dgEvent) throws ApiException {
        okhttp3.Call localVarCall = postCustomerDgEventsValidateBeforeCall(dgEvent, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create an Event (asynchronously)
     * Create a new event for analytics
     * @param dgEvent  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The event has been successfully created </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCustomerDgEventsAsync(DgEvent dgEvent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCustomerDgEventsValidateBeforeCall(dgEvent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDgContractExercises
     * @param createDgContractExerciseRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDgContractExercisesCall(CreateDgContractExerciseRequest createDgContractExerciseRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDgContractExerciseRequest;

        // create path and map variables
        String localVarPath = "/dg_contract_exercises";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (hcSessionID != null) {
            localVarHeaderParams.put("HC-Session-ID", localVarApiClient.parameterToString(hcSessionID));
        }


        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDgContractExercisesValidateBeforeCall(CreateDgContractExerciseRequest createDgContractExerciseRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDgContractExerciseRequest' is set
        if (createDgContractExerciseRequest == null) {
            throw new ApiException("Missing the required parameter 'createDgContractExerciseRequest' when calling postDgContractExercises(Async)");
        }

        return postDgContractExercisesCall(createDgContractExerciseRequest, hcSessionID, _callback);

    }

    /**
     * Create DG Exercise
     * Record that a request to exercise a DG contract has occurred.
     * @param createDgContractExerciseRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return CreateDgContractExerciseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public CreateDgContractExerciseResponse postDgContractExercises(CreateDgContractExerciseRequest createDgContractExerciseRequest, String hcSessionID) throws ApiException {
        ApiResponse<CreateDgContractExerciseResponse> localVarResp = postDgContractExercisesWithHttpInfo(createDgContractExerciseRequest, hcSessionID);
        return localVarResp.getData();
    }

    /**
     * Create DG Exercise
     * Record that a request to exercise a DG contract has occurred.
     * @param createDgContractExerciseRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return ApiResponse&lt;CreateDgContractExerciseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDgContractExerciseResponse> postDgContractExercisesWithHttpInfo(CreateDgContractExerciseRequest createDgContractExerciseRequest, String hcSessionID) throws ApiException {
        okhttp3.Call localVarCall = postDgContractExercisesValidateBeforeCall(createDgContractExerciseRequest, hcSessionID, null);
        Type localVarReturnType = new TypeToken<CreateDgContractExerciseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create DG Exercise (asynchronously)
     * Record that a request to exercise a DG contract has occurred.
     * @param createDgContractExerciseRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG contract exercise </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDgContractExercisesAsync(CreateDgContractExerciseRequest createDgContractExerciseRequest, String hcSessionID, final ApiCallback<CreateDgContractExerciseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDgContractExercisesValidateBeforeCall(createDgContractExerciseRequest, hcSessionID, _callback);
        Type localVarReturnType = new TypeToken<CreateDgContractExerciseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDgContracts
     * @param createDgContractRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG contract creation request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDgContractsCall(CreateDgContractRequest createDgContractRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDgContractRequest;

        // create path and map variables
        String localVarPath = "/dg_contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDgContractsValidateBeforeCall(CreateDgContractRequest createDgContractRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDgContractRequest' is set
        if (createDgContractRequest == null) {
            throw new ApiException("Missing the required parameter 'createDgContractRequest' when calling postDgContracts(Async)");
        }

        return postDgContractsCall(createDgContractRequest, _callback);

    }

    /**
     * Create a DG Contract
     * Create a DG contract from selected DG offer(s).
     * @param createDgContractRequest  (required)
     * @return DgContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG contract creation request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public DgContract postDgContracts(CreateDgContractRequest createDgContractRequest) throws ApiException {
        ApiResponse<DgContract> localVarResp = postDgContractsWithHttpInfo(createDgContractRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DG Contract
     * Create a DG contract from selected DG offer(s).
     * @param createDgContractRequest  (required)
     * @return ApiResponse&lt;DgContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG contract creation request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DgContract> postDgContractsWithHttpInfo(CreateDgContractRequest createDgContractRequest) throws ApiException {
        okhttp3.Call localVarCall = postDgContractsValidateBeforeCall(createDgContractRequest, null);
        Type localVarReturnType = new TypeToken<DgContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DG Contract (asynchronously)
     * Create a DG contract from selected DG offer(s).
     * @param createDgContractRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG contract creation request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDgContractsAsync(CreateDgContractRequest createDgContractRequest, final ApiCallback<DgContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDgContractsValidateBeforeCall(createDgContractRequest, _callback);
        Type localVarReturnType = new TypeToken<DgContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDgContractsIdPayment
     * @param id A unique identifier for a contract (required)
     * @param processDgPaymentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contract has been paid </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDgContractsIdPaymentCall(String id, ProcessDgPaymentRequest processDgPaymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processDgPaymentRequest;

        // create path and map variables
        String localVarPath = "/dg_contracts/{id}/payment"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDgContractsIdPaymentValidateBeforeCall(String id, ProcessDgPaymentRequest processDgPaymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postDgContractsIdPayment(Async)");
        }

        // verify the required parameter 'processDgPaymentRequest' is set
        if (processDgPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'processDgPaymentRequest' when calling postDgContractsIdPayment(Async)");
        }

        return postDgContractsIdPaymentCall(id, processDgPaymentRequest, _callback);

    }

    /**
     * Process DG payment
     * When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the DG fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl --request POST --url https://core.spreedly.com/v1/payment_methods.json --header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; --data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process DG Payment request below.
     * @param id A unique identifier for a contract (required)
     * @param processDgPaymentRequest  (required)
     * @return DgPayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contract has been paid </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public DgPayment postDgContractsIdPayment(String id, ProcessDgPaymentRequest processDgPaymentRequest) throws ApiException {
        ApiResponse<DgPayment> localVarResp = postDgContractsIdPaymentWithHttpInfo(id, processDgPaymentRequest);
        return localVarResp.getData();
    }

    /**
     * Process DG payment
     * When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the DG fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl --request POST --url https://core.spreedly.com/v1/payment_methods.json --header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; --data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process DG Payment request below.
     * @param id A unique identifier for a contract (required)
     * @param processDgPaymentRequest  (required)
     * @return ApiResponse&lt;DgPayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contract has been paid </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DgPayment> postDgContractsIdPaymentWithHttpInfo(String id, ProcessDgPaymentRequest processDgPaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = postDgContractsIdPaymentValidateBeforeCall(id, processDgPaymentRequest, null);
        Type localVarReturnType = new TypeToken<DgPayment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Process DG payment (asynchronously)
     * When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the DG fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl --request POST --url https://core.spreedly.com/v1/payment_methods.json --header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; --data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process DG Payment request below.
     * @param id A unique identifier for a contract (required)
     * @param processDgPaymentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contract has been paid </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDgContractsIdPaymentAsync(String id, ProcessDgPaymentRequest processDgPaymentRequest, final ApiCallback<DgPayment> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDgContractsIdPaymentValidateBeforeCall(id, processDgPaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<DgPayment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDgOffers
     * @param createDgOffersRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG offers </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDgOffersCall(CreateDgOffersRequest createDgOffersRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDgOffersRequest;

        // create path and map variables
        String localVarPath = "/dg_offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (hcSessionID != null) {
            localVarHeaderParams.put("HC-Session-ID", localVarApiClient.parameterToString(hcSessionID));
        }


        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDgOffersValidateBeforeCall(CreateDgOffersRequest createDgOffersRequest, String hcSessionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDgOffersRequest' is set
        if (createDgOffersRequest == null) {
            throw new ApiException("Missing the required parameter 'createDgOffersRequest' when calling postDgOffers(Async)");
        }

        return postDgOffersCall(createDgOffersRequest, hcSessionID, _callback);

    }

    /**
     * Create DG Offers
     * Create DG offers for a user&#39;s trip
     * @param createDgOffersRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return List&lt;CreateDgOfferItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG offers </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public List<CreateDgOfferItemResponse> postDgOffers(CreateDgOffersRequest createDgOffersRequest, String hcSessionID) throws ApiException {
        ApiResponse<List<CreateDgOfferItemResponse>> localVarResp = postDgOffersWithHttpInfo(createDgOffersRequest, hcSessionID);
        return localVarResp.getData();
    }

    /**
     * Create DG Offers
     * Create DG offers for a user&#39;s trip
     * @param createDgOffersRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @return ApiResponse&lt;List&lt;CreateDgOfferItemResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG offers </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreateDgOfferItemResponse>> postDgOffersWithHttpInfo(CreateDgOffersRequest createDgOffersRequest, String hcSessionID) throws ApiException {
        okhttp3.Call localVarCall = postDgOffersValidateBeforeCall(createDgOffersRequest, hcSessionID, null);
        Type localVarReturnType = new TypeToken<List<CreateDgOfferItemResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create DG Offers (asynchronously)
     * Create DG offers for a user&#39;s trip
     * @param createDgOffersRequest  (required)
     * @param hcSessionID The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created DG offers </td><td>  * Expires -  <br>  * Cache-Control -  <br>  * HTS-Session-ID - The ID of the current session, see [Sessions](#tag/Sessions) <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDgOffersAsync(CreateDgOffersRequest createDgOffersRequest, String hcSessionID, final ApiCallback<List<CreateDgOfferItemResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDgOffersValidateBeforeCall(createDgOffersRequest, hcSessionID, _callback);
        Type localVarReturnType = new TypeToken<List<CreateDgOfferItemResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putDgContractsIdItinerarySlices
     * @param id A unique identifier for a contract (required)
     * @param dgItinerarySlice  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Updated DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG Contract Itinerary Slices update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDgContractsIdItinerarySlicesCall(String id, List<DgItinerarySlice> dgItinerarySlice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dgItinerarySlice;

        // create path and map variables
        String localVarPath = "/dg_contracts/{id}/itinerary_slices"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putDgContractsIdItinerarySlicesValidateBeforeCall(String id, List<DgItinerarySlice> dgItinerarySlice, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putDgContractsIdItinerarySlices(Async)");
        }

        // verify the required parameter 'dgItinerarySlice' is set
        if (dgItinerarySlice == null) {
            throw new ApiException("Missing the required parameter 'dgItinerarySlice' when calling putDgContractsIdItinerarySlices(Async)");
        }

        return putDgContractsIdItinerarySlicesCall(id, dgItinerarySlice, _callback);

    }

    /**
     * Update DG Contract Itinerary Slices
     * Update itinerary slices of a DG contract.
     * @param id A unique identifier for a contract (required)
     * @param dgItinerarySlice  (required)
     * @return DgContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Updated DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG Contract Itinerary Slices update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public DgContract putDgContractsIdItinerarySlices(String id, List<DgItinerarySlice> dgItinerarySlice) throws ApiException {
        ApiResponse<DgContract> localVarResp = putDgContractsIdItinerarySlicesWithHttpInfo(id, dgItinerarySlice);
        return localVarResp.getData();
    }

    /**
     * Update DG Contract Itinerary Slices
     * Update itinerary slices of a DG contract.
     * @param id A unique identifier for a contract (required)
     * @param dgItinerarySlice  (required)
     * @return ApiResponse&lt;DgContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Updated DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG Contract Itinerary Slices update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DgContract> putDgContractsIdItinerarySlicesWithHttpInfo(String id, List<DgItinerarySlice> dgItinerarySlice) throws ApiException {
        okhttp3.Call localVarCall = putDgContractsIdItinerarySlicesValidateBeforeCall(id, dgItinerarySlice, null);
        Type localVarReturnType = new TypeToken<DgContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update DG Contract Itinerary Slices (asynchronously)
     * Update itinerary slices of a DG contract.
     * @param id A unique identifier for a contract (required)
     * @param dgItinerarySlice  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Updated DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG Contract Itinerary Slices update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDgContractsIdItinerarySlicesAsync(String id, List<DgItinerarySlice> dgItinerarySlice, final ApiCallback<DgContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = putDgContractsIdItinerarySlicesValidateBeforeCall(id, dgItinerarySlice, _callback);
        Type localVarReturnType = new TypeToken<DgContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putDgContractsIdUpdateStatus
     * @param id A unique identifier for a contract (required)
     * @param updateDgContractStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Updated DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG contract status update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDgContractsIdUpdateStatusCall(String id, UpdateDgContractStatusRequest updateDgContractStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDgContractStatusRequest;

        // create path and map variables
        String localVarPath = "/dg_contracts/{id}/update_status"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putDgContractsIdUpdateStatusValidateBeforeCall(String id, UpdateDgContractStatusRequest updateDgContractStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putDgContractsIdUpdateStatus(Async)");
        }

        // verify the required parameter 'updateDgContractStatusRequest' is set
        if (updateDgContractStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDgContractStatusRequest' when calling putDgContractsIdUpdateStatus(Async)");
        }

        return putDgContractsIdUpdateStatusCall(id, updateDgContractStatusRequest, _callback);

    }

    /**
     * Update DG Contract Status
     * Update DG Contract Status
     * @param id A unique identifier for a contract (required)
     * @param updateDgContractStatusRequest  (required)
     * @return DgContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Updated DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG contract status update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public DgContract putDgContractsIdUpdateStatus(String id, UpdateDgContractStatusRequest updateDgContractStatusRequest) throws ApiException {
        ApiResponse<DgContract> localVarResp = putDgContractsIdUpdateStatusWithHttpInfo(id, updateDgContractStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Update DG Contract Status
     * Update DG Contract Status
     * @param id A unique identifier for a contract (required)
     * @param updateDgContractStatusRequest  (required)
     * @return ApiResponse&lt;DgContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Updated DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG contract status update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DgContract> putDgContractsIdUpdateStatusWithHttpInfo(String id, UpdateDgContractStatusRequest updateDgContractStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = putDgContractsIdUpdateStatusValidateBeforeCall(id, updateDgContractStatusRequest, null);
        Type localVarReturnType = new TypeToken<DgContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update DG Contract Status (asynchronously)
     * Update DG Contract Status
     * @param id A unique identifier for a contract (required)
     * @param updateDgContractStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Updated DG contract </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 204 </td><td> The DG contract status update request was successfully validated but not performed </td><td>  * Expires -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The client could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated client does not have permission to call this endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Semantic errors were encountered while handling the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDgContractsIdUpdateStatusAsync(String id, UpdateDgContractStatusRequest updateDgContractStatusRequest, final ApiCallback<DgContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = putDgContractsIdUpdateStatusValidateBeforeCall(id, updateDgContractStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<DgContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
