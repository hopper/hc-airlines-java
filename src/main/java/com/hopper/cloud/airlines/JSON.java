/*
 * Airline API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hopper.cloud.airlines;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
                .registerTypeSelector(com.hopper.cloud.airlines.model.Browser.class, new TypeSelector<com.hopper.cloud.airlines.model.Browser>() {
                    @Override
                    public Class<? extends com.hopper.cloud.airlines.model.Browser> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("chrome", com.hopper.cloud.airlines.model.Chrome.class);
                        classByDiscriminatorValue.put("edge", com.hopper.cloud.airlines.model.Edge.class);
                        classByDiscriminatorValue.put("firefox", com.hopper.cloud.airlines.model.Firefox.class);
                        classByDiscriminatorValue.put("internet_explorer", com.hopper.cloud.airlines.model.InternetExplorer.class);
                        classByDiscriminatorValue.put("opera", com.hopper.cloud.airlines.model.Opera.class);
                        classByDiscriminatorValue.put("other_browser", com.hopper.cloud.airlines.model.OtherBrowser.class);
                        classByDiscriminatorValue.put("safari", com.hopper.cloud.airlines.model.Safari.class);
                        classByDiscriminatorValue.put("browser", com.hopper.cloud.airlines.model.Browser.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(com.hopper.cloud.airlines.model.CfarEvent.class, new TypeSelector<com.hopper.cloud.airlines.model.CfarEvent>() {
                    @Override
                    public Class<? extends com.hopper.cloud.airlines.model.CfarEvent> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("booking_confirmed", com.hopper.cloud.airlines.model.BookingConfirmed1.class);
                        classByDiscriminatorValue.put("cfar_deny_purchase", com.hopper.cloud.airlines.model.CfarDenyPurchase.class);
                        classByDiscriminatorValue.put("cfar_event_with_contract", com.hopper.cloud.airlines.model.CfarEventWithContract.class);
                        classByDiscriminatorValue.put("cfar_exercise_callback_launched", com.hopper.cloud.airlines.model.CfarExerciseCallbackLaunched.class);
                        classByDiscriminatorValue.put("cfar_exercise_customer_data_complete", com.hopper.cloud.airlines.model.CfarExerciseCustomerDataComplete.class);
                        classByDiscriminatorValue.put("cfar_exercise_portal_complete", com.hopper.cloud.airlines.model.CfarExercisePortalComplete.class);
                        classByDiscriminatorValue.put("cfar_exercise_portal_display", com.hopper.cloud.airlines.model.CfarExercisePortalDisplay.class);
                        classByDiscriminatorValue.put("cfar_exercise_verification_complete", com.hopper.cloud.airlines.model.CfarExerciseVerificationComplete.class);
                        classByDiscriminatorValue.put("cfar_exercise_verification_sent", com.hopper.cloud.airlines.model.CfarExerciseVerificationSent.class);
                        classByDiscriminatorValue.put("cfar_forced_choice_warning", com.hopper.cloud.airlines.model.CfarForcedChoiceWarning.class);
                        classByDiscriminatorValue.put("cfar_offers_banner_display", com.hopper.cloud.airlines.model.CfarOffersBannerDisplay.class);
                        classByDiscriminatorValue.put("cfar_offers_takeover_display", com.hopper.cloud.airlines.model.CfarOffersTakeoverDisplay.class);
                        classByDiscriminatorValue.put("cfar_view_info", com.hopper.cloud.airlines.model.CfarViewInfo.class);
                        classByDiscriminatorValue.put("offers_displayed", com.hopper.cloud.airlines.model.OffersDisplayed1.class);
                        classByDiscriminatorValue.put("booking_confirmed1", com.hopper.cloud.airlines.model.BookingConfirmed1.class);
                        classByDiscriminatorValue.put("offers_displayed1", com.hopper.cloud.airlines.model.OffersDisplayed1.class);
                        classByDiscriminatorValue.put("cfar_event", com.hopper.cloud.airlines.model.CfarEvent.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(com.hopper.cloud.airlines.model.Device.class, new TypeSelector<com.hopper.cloud.airlines.model.Device>() {
                    @Override
                    public Class<? extends com.hopper.cloud.airlines.model.Device> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("desktop", com.hopper.cloud.airlines.model.Desktop.class);
                        classByDiscriminatorValue.put("mobile", com.hopper.cloud.airlines.model.Mobile.class);
                        classByDiscriminatorValue.put("tablet", com.hopper.cloud.airlines.model.Tablet.class);
                        classByDiscriminatorValue.put("device", com.hopper.cloud.airlines.model.Device.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(com.hopper.cloud.airlines.model.DgEvent.class, new TypeSelector<com.hopper.cloud.airlines.model.DgEvent>() {
                    @Override
                    public Class<? extends com.hopper.cloud.airlines.model.DgEvent> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("booking_confirmed", com.hopper.cloud.airlines.model.BookingConfirmed2.class);
                        classByDiscriminatorValue.put("dg_exercise_callback_launched", com.hopper.cloud.airlines.model.DgExerciseCallbackLaunched.class);
                        classByDiscriminatorValue.put("dg_exercise_customer_data_complete", com.hopper.cloud.airlines.model.DgExerciseCustomerDataComplete.class);
                        classByDiscriminatorValue.put("dg_exercise_portal_complete", com.hopper.cloud.airlines.model.DgExercisePortalComplete.class);
                        classByDiscriminatorValue.put("dg_exercise_verification_complete", com.hopper.cloud.airlines.model.DgExerciseVerificationComplete.class);
                        classByDiscriminatorValue.put("booking_confirmed2", com.hopper.cloud.airlines.model.BookingConfirmed2.class);
                        classByDiscriminatorValue.put("dg_event", com.hopper.cloud.airlines.model.DgEvent.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(com.hopper.cloud.airlines.model.Event.class, new TypeSelector<com.hopper.cloud.airlines.model.Event>() {
                    @Override
                    public Class<? extends com.hopper.cloud.airlines.model.Event> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("booking_confirmed", com.hopper.cloud.airlines.model.BookingConfirmed.class);
                        classByDiscriminatorValue.put("offers_displayed", com.hopper.cloud.airlines.model.OffersDisplayed.class);
                        classByDiscriminatorValue.put("event", com.hopper.cloud.airlines.model.Event.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(com.hopper.cloud.airlines.model.FormOfPayment.class, new TypeSelector<com.hopper.cloud.airlines.model.FormOfPayment>() {
                    @Override
                    public Class<? extends com.hopper.cloud.airlines.model.FormOfPayment> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("cash", com.hopper.cloud.airlines.model.Cash.class);
                        classByDiscriminatorValue.put("non_cash", com.hopper.cloud.airlines.model.NonCash.class);
                        classByDiscriminatorValue.put("payment_card", com.hopper.cloud.airlines.model.PaymentCard.class);
                        classByDiscriminatorValue.put("points", com.hopper.cloud.airlines.model.Points.class);
                        classByDiscriminatorValue.put("form_of_payment", com.hopper.cloud.airlines.model.FormOfPayment.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(com.hopper.cloud.airlines.model.OperatingSystem.class, new TypeSelector<com.hopper.cloud.airlines.model.OperatingSystem>() {
                    @Override
                    public Class<? extends com.hopper.cloud.airlines.model.OperatingSystem> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("android", com.hopper.cloud.airlines.model.Android.class);
                        classByDiscriminatorValue.put("chrome_os", com.hopper.cloud.airlines.model.ChromeOs.class);
                        classByDiscriminatorValue.put("i_os", com.hopper.cloud.airlines.model.IOs.class);
                        classByDiscriminatorValue.put("linux", com.hopper.cloud.airlines.model.Linux.class);
                        classByDiscriminatorValue.put("mac_os", com.hopper.cloud.airlines.model.MacOs.class);
                        classByDiscriminatorValue.put("other_os", com.hopper.cloud.airlines.model.OtherOs.class);
                        classByDiscriminatorValue.put("windows", com.hopper.cloud.airlines.model.Windows.class);
                        classByDiscriminatorValue.put("operating_system", com.hopper.cloud.airlines.model.OperatingSystem.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(com.hopper.cloud.airlines.model.Platform.class, new TypeSelector<com.hopper.cloud.airlines.model.Platform>() {
                    @Override
                    public Class<? extends com.hopper.cloud.airlines.model.Platform> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("app", com.hopper.cloud.airlines.model.App.class);
                        classByDiscriminatorValue.put("web", com.hopper.cloud.airlines.model.Web.class);
                        classByDiscriminatorValue.put("platform", com.hopper.cloud.airlines.model.Platform.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    static {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.AirlineSession.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Ancillary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Android.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.App.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.AuthRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.AuthResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.BadRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.BookingConfirmed.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.BookingConfirmed1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.BookingConfirmed2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Browser.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Cash.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarContents.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarContract.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarContractExercise.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarCreateExerciseItinerary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarCreateExerciseItinerarySlice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarCreateExercisePassengerPricing.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarCreateExerciseSliceSegment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarDenyPurchase.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarEventWithContract.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarExerciseCallbackLaunched.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarExerciseCustomerDataComplete.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarExercisePortalComplete.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarExercisePortalDisplay.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarExerciseVerificationComplete.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarExerciseVerificationSent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarForcedChoiceWarning.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarItinerary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarItinerarySlice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarItinerarySliceSegment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarOffer.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarOfferItinerary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarOfferPassenger.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarOffersBannerDisplay.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarOffersTakeoverDisplay.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarPassenger.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarPassengerTax.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarPayment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarTax.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CfarViewInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Chrome.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.ChromeOs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CreateAirlineCfarSessionRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CreateAirlineDgSessionRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CreateAirlineSessionRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CreateCfarContractExerciseRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CreateCfarContractRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CreateCfarOfferRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CreateDgContractExerciseRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CreateDgContractExerciseResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CreateDgContractRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CreateDgOfferItemResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.CreateDgOffersRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Desktop.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Device.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgAncillary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgContents.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgContract.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgExerciseCallbackLaunched.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgExerciseCustomerDataComplete.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgExerciseItinerary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgExerciseItinerarySlice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgExerciseItinerarySliceSegment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgExercisePortalComplete.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgExerciseVerificationComplete.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgItinerary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgItinerarySlice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgItinerarySliceSegment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgOffer.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgPassenger.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgPassengerCount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgPassengerPricing.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgPassengerTax.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgPayment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.DgTax.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Edge.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Error.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Event.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Fare.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.FareRule.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Firefox.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.FormOfPayment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.IOs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.InternetExplorer.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Linux.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.MacOs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.MarkCfarContractExerciseCompleteRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Mobile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.NonCash.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.OffersDisplayed.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.OffersDisplayed1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Opera.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.OperatingSystem.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.OtherBrowser.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.OtherOs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.PassengerCount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.PassengerPricing.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.PaymentCard.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Platform.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Points.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.ProcessCfarPaymentRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.ProcessDgPaymentRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Safari.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Tablet.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.UnprocessableEntity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.UpdateCfarContractRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.UpdateCfarFormOfPaymentRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.UpdateDgContractStatusRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.UserInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Web.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.hopper.cloud.airlines.model.Windows.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
